;;; me-builtin.el --- Emacs built-in packages -*- lexical-binding: t; -*-

;; Copyright (C) 2022-2025  Abdelhak Bougouffa

;; Author: Abdelhak Bougouffa (rot13 "nobhtbhssn@srqbencebwrpg.bet")
;; Created: 2023-03-26
;; Last modified: 2025-06-25

;;; Commentary:

;;; Code:

(require 'me-lib)

(use-package emacs
  :hook
  (after-save . +save--guess-file-mode-h)
  (minibuffer-setup . cursor-intangible-mode) ; See the `minibuffer-prompt-properties' below
  :custom
  ;; ====== Default directories for builtin packages ======
  (auto-save-list-file-prefix (+directory-ensure minemacs-local-dir "auto-save/"))
  (backup-directory-alist (list (cons "." (+directory-ensure minemacs-local-dir "backup/"))))

  ;; ====== Better defaults ======
  (auto-save-file-name-transforms ; Set file naming transform for `auto-save'
   `(("\\`/[^/]*:\\([^/]*/\\)*\\([^/]*\\)\\'" ,(concat auto-save-list-file-prefix "tramp-\\2") sha1)
     (".*" ,auto-save-list-file-prefix sha1)))
  (scroll-preserve-screen-position t) ; Keep the point in the same position while scrolling
  (scroll-conservatively 101) ; Do not move cursor to the center when scrolling
  (scroll-margin 2) ; Scroll at a margin of one line
  (create-lockfiles nil) ; Disable lockfiles
  (make-backup-files t) ; Enable making backup files
  (version-control t) ; Number each backup file
  (backup-by-copying t) ; Copy instead of renaming current file
  (delete-old-versions t) ; Clean up after itself
  (tab-always-indent 'complete) ; Make TAB indents first, then inserts the TAB character
  (require-final-newline t) ; End files with newline
  (undo-limit 2000000) ; 2MB, soft limit for undo data (per-buffer, size of `buffer-undo-list') to keep (def. 160kB)
  (undo-strong-limit 5000000) ; 5MB, discard undo data greater than this generated by a single a command, except the last one (def. 240kB)
  (undo-outer-limit 30000000) ; 30MB, like the strong limit, but including the last command, prints a warning when it happens (def. 24MB)
  (kill-ring-max 1000) ; Maximum length of kill ring before oldest elements are thrown away (def. 120)
  (use-system-tooltips nil) ; Use small frames to display tooltips instead of the default OS tooltips
  (window-combination-resize t) ; Resize window combinations proportionally
  (x-stretch-cursor t) ; Stretch cursor to the glyph width
  (frame-resize-pixelwise t) ; Do force frame size to be a multiple of char size
  (frame-title-format '("GNU Emacs (%b)")) ; Custom frame title
  (help-window-select t) ; Select help window for faster quit!
  (Man-notify-method 'aggressive) ; Same thing with `man'
  (read-process-output-max ; Increase single chunk bytes to read from subprocess (def. 4096)
   (condition-case nil
       (with-temp-buffer ; On GNU/Linux systems, the value should not exceed `pipe-max-size'
         (insert-file-contents "/proc/sys/fs/pipe-max-size")
         (string-to-number (buffer-string)))
     (error (* 1024 1024))))
  (completion-ignore-case t) ; Ignore case when completing
  (read-buffer-completion-ignore-case t)
  (read-file-name-completion-ignore-case t) ; Ignores case when completing files names
  (read-extended-command-predicate #'command-completion-default-include-p) ; In `M-x', hide commands not relevant for the current mode
  (completions-detailed t) ; More info on completions
  (completions-sort (if (>= emacs-major-version 30) 'historical 'alphabetical))
  (enable-recursive-minibuffers t) ; Enable recursive calls to minibuffer
  (minibuffer-prompt-properties ; Do not allow the cursor in the minibuffer prompt (works with `cursor-intangible-mode')
   '(read-only t cursor-intangible t face minibuffer-prompt))
  (sentence-end-double-space nil) ; Use single space between sentences
  (delete-by-moving-to-trash t) ; Move stuff to trash
  (save-some-buffers-default-predicate #'save-some-buffers-root) ; Save files only in sub-directories of current project
  (inhibit-startup-screen t) ; Inhibit startup message
  (initial-major-mode 'fundamental-mode) ; Set initial buffer to fundamental-mode for faster load
  (large-file-warning-threshold (* 20 1024 1024)) ; Increase the large file threshold to 20MiB (10MB)
  (use-dialog-box nil) ; Always prompt in minibuffer (no GUI)
  (use-short-answers t) ; Use y or n instead of yes or no
  (confirm-kill-emacs #'y-or-n-p) ; Confirm before quitting
  (prettify-symbols-unprettify-at-point t) ; Show unprettified symbol under cursor (when in `prettify-symbols-mode')
  (display-fill-column-indicator-character ?\u250a) ; Use a dashed line for `display-fill-column-indicator-mode'
  (indicate-buffer-boundaries 'right) ; Show buffer boundaries in the right fringe
  (apropos-do-all t) ; Make apropos commands search more extensively
  (vc-follow-symlinks t) ; Do not ask obvious questions, follow symlinks
  (shell-kill-buffer-on-exit t) ; Kill the shell buffer after exit
  (widget-image-enable nil) ; No ugly button for widgets
  (tooltip-hide-delay 20) ; Make tooltips last a bit longer (default 10s)
  (image-animate-loop t) ; Animated images loop forever instead of playing the animation only once
  (icomplete-compute-delay 0.01) ; Don't delay displaying completion candidates in `fido-mode' (def. 0.15)
  (ring-bell-function #'ignore) ; Don't beep (will be overwritten by `doom-modeline')
  (inhibit-compacting-font-caches t) ; Trade memory usage for less lagging
  (set-mark-command-repeat-pop t) ; Use C-u C-SPC C-SPC... instead of C-u C-SPC C-u C-SPC...
  (mode-line-collapse-minor-modes t) ; Collapse minor modes in mode line lighters (Emacs 31+)
  :init
  (setq-default truncate-lines nil ; Don't truncate long line, display them
                fill-column 80 ; Default fill column width
                tab-width 4) ; Default (8) is too big!

  ;; When `me-completion/vertico' is disabled, enable `fido-vertical-mode' as a fallback
  (when (or minemacs-builtin-only-p (+package-disabled-p 'vertico 'me-completion))
    (fido-vertical-mode 1))

  ;; When `me-completion/corfu' is disabled, enable `global-completion-preview-mode'
  (when (and (fboundp 'global-completion-preview-mode) (or minemacs-builtin-only-p (+package-disabled-p 'corfu 'me-completion)))
    (global-completion-preview-mode 1)
    (add-hook 'minibuffer-mode-hook 'completion-preview-mode)) ; Use also in the minibuffer

  ;; When `me-editor/smartparens' is disabled, enable `electric-pair-mode'
  (when (or minemacs-builtin-only-p (+package-disabled-p 'smartparens 'me-editor))
    (electric-pair-mode 1))

  ;; Inhibit startup message in echo area the brutal way!
  ;; The `inhibit-startup-echo-area-message' variable is very restrictive, there is only one unique way of setting it right!
  ;; See: https://reddit.com/r/emacs/comments/6e9o4o/comment/di8q1t5
  (fset 'display-startup-echo-area-message #'ignore)
  (fset 'display-startup-screen #'ignore)

  ;;; Why use anything but UTF-8?
  (prefer-coding-system 'utf-8)
  (set-charset-priority 'unicode)
  (set-default-coding-systems 'utf-8)
  (set-language-environment "UTF-8")
  (set-locale-environment "en_US.UTF-8")
  ;; Use UTF-16-LE in Windows, see: https://rufflewind.com/2014-07-20/pasting-unicode-in-emacs-on-windows
  (set-selection-coding-system (if (featurep 'os/win) 'utf-16-le 'utf-8))
  :config
  ;; Unbind some annoying commands
  (keymap-global-unset "C-z" 'remove)
  (keymap-global-unset "C-x C-z" 'remove)

  ;; Remap some keys/page
  (keymap-global-set "M-:" #'pp-eval-expression) ; Instead of `eval-expression'
  (keymap-global-set "C-c f" #'recentf) ; Instead of `find-file-read-only'
  (keymap-global-set "<f1>" #'shell) ; Instead of `help-map' (accessible via `C-h')
  (keymap-global-set "C-c D" #'+delete-current-file-and-buffer)
  (keymap-global-set "<remap> <kill-word>" #'+kill-whitespace-or-word) ; M-d
  (keymap-global-set "<remap> <kill-region>" #'+kill-region-or-backward-word) ; C-w
  (keymap-global-set "<remap> <backward-kill-word>" #'+backward-kill-whitespace-or-word) ; M-delete or C-backspace

  ;; Enable some useful Emacs commands by default
  (dolist (command '(narrow-to-region narrow-to-defun narrow-to-page upcase-region downcase-region))
    (put command 'disabled nil))

  (defvar-keymap minemacs-open-thing-map :doc "Open/toggle thing, under `C-c o'." :name "Open/toggle thing")
  (keymap-global-set "C-c o" `("open-thing" . ,minemacs-open-thing-map))

  (defun +theme--disable-previous-themes:before-a (&rest _args)
    "Disable previously enabled themes before enabling the new one."
    (mapc #'disable-theme custom-enabled-themes))

  ;; Disable previously enabled custom themes before enabling a new one.
  (advice-add 'load-theme :before '+theme--disable-previous-themes:before-a)

  ;; Show trailing whitespace in `prog-mode' and `conf-mode'
  (+setq-hook! (prog-mode conf-mode) show-trailing-whitespace t)

  ;; Subtle color for trailing whitespaces
  (defun +face--subtle-trailing-whitespace-h (&rest _args)
    (with-eval-after-load 'faces
      (when (display-graphic-p)
        (when-let* ((new-color (+color-subtle 'error 50)))
          (set-face-background 'trailing-whitespace new-color)))))

  (dolist (hook '(enable-theme-functions disable-theme-functions server-after-make-frame-hook))
    (add-hook hook #'+face--subtle-trailing-whitespace-h))

  ;; By default, Emacs asks before quitting with "C-x C-c", but when running an
  ;; Emacs Client session, it won't ask unless a file is not saved. I hit "C-x
  ;; C-c" a lot by error, so lets make it ask before quitting.
  (defun +emacs--ask-on-emacsclient:around-a (origfn arg)
    (if (frame-parameter nil 'client)
        (pcase (read-answer "Quit Emacs? " '(("yes"  ?y "quit Emacs Client")
                                             ("no"   ?n "don't quit")
                                             ("quit" ?q "kill Emacs")))
          ("yes" (apply origfn arg))
          ("quit" (kill-emacs)))
      (apply origfn arg)))

  (advice-add 'save-buffers-kill-terminal :around #'+emacs--ask-on-emacsclient:around-a)

  ;; Guess the major mode after saving a file in `fundamental-mode' (adapted from Doom Emacs).
  (defun +save--guess-file-mode-h ()
    "Guess major mode when saving a file in `fundamental-mode'.
Likely, something has changed since the buffer was opened. e.g. A shebang line
or file path may exist now."
    (when (eq major-mode 'fundamental-mode)
      (let ((buffer (or (buffer-base-buffer) (current-buffer))))
        (and (buffer-file-name buffer)
             (eq buffer (window-buffer (selected-window))) ; Only when the buffer is in the current window
             (set-auto-mode)))))

  ;; Offer to create parent directories if they do not exist. The arguments are
  ;; made optional so we can use it with both `find-file' and `rename-file'
  (defun +create-non-existent-directory (&optional _filename newname &rest _args)
    (when-let* ((target-file (or newname buffer-file-name))
                (parent-directory (file-name-directory target-file))
                ((not (file-exists-p parent-directory)))
                ((y-or-n-p (format "Directory %S does't exist! Create it?" parent-directory))))
      (make-directory parent-directory t)
      t))

  (advice-add 'rename-file :before #'+create-non-existent-directory)
  (add-hook 'find-file-not-found-functions #'+create-non-existent-directory 80))

(use-package transient
  :straight (:host github :repo "magit/transient")) ; Magit depends on the fresh version

(use-package newcomment
  :custom
  (comment-multi-line t)
  :init
  ;; Inline comments have to be preceded by at least this many spaces. Python's
  ;; PEP8 recommends two spaces
  (+setq-hook! python-mode comment-inline-offset 2))

(use-package crm
  :custom
  (crm-prompt "[CRM%s] %p")
  :config
  (unless (>= emacs-major-version 31) ; Backporting Emacs 31's `crm-prompt' integration
    (defvar crm-prompt "[CRM%s] %p")
    (defun +crm--indicator:filter-args-a (args)
      (cons (format-spec
             crm-prompt
             (let* ((prompt (car args))
                    (sep (or (get-text-property 0 'separator crm-separator) (string-replace "[ \t]*" "" crm-separator)))
                    (desc (or (get-text-property 0 'description crm-separator) (concat "list separated by " sep))))
               `((?s . ,sep) (?d . ,desc) (?p . ,prompt))))
            (cdr args)))
    (advice-add #'completing-read-multiple :filter-args #'+crm--indicator:filter-args-a)))

(use-package which-key
  :straight (which-key :source gnu-elpa-mirror)
  :hook (minemacs-lazy . which-key-mode)
  :custom
  (which-key-idle-delay 1.0)
  (which-key-idle-secondary-delay nil)
  (which-key-ellipsis "..")
  (which-key-prefix-prefix "+")
  (which-key-sort-order #'which-key-key-order-alpha)
  (which-key-min-display-lines 3)
  (which-key-max-display-columns nil)
  (which-key-allow-multiple-replacements t) ; Allow multiple rules in `which-key-replacement-alist'
  :config
  ;; Setup `which-key' integration with the minibuffer
  (which-key-setup-minibuffer))

(use-package tramp
  :straight (tramp :source gnu-elpa-mirror)
  :init
  (if (featurep 'os/win)
      (when (executable-find "plink")
        (setopt tramp-default-method "plink")) ; When available, use "plink", the PuTTY Link SSH
    (setopt tramp-default-method "ssh")) ; This is faster than the default "scp"
  :custom
  (tramp-use-connection-share t)
  (tramp-auto-save-directory (concat minemacs-local-dir "tramp-auto-save/"))
  (tramp-backup-directory-alist backup-directory-alist)
  :config
  (setq tramp-temp-name-prefix (expand-file-name "tramp." temporary-file-directory)
        tramp-default-remote-shell "/bin/bash"
        ;; PERF: More responsive file editing via TRAMP.
        ;; See: "(tramp) Ssh setup" and https://news.ycombinator.com/item?id=39193252
        tramp-ssh-controlmaster-options
        (concat
         "-o ControlPath=" (file-name-as-directory temporary-file-directory) "tramp.ssh-controlpath-%%C "
         "-o ControlMaster=auto -o ControlPersist=1800 " ; persist for 30min
         "-o ServerAliveInterval=5 -o ServerAliveCountMax=2")))

(use-package password-cache
  :custom
  (password-cache t) ; Enable password caching
  (password-cache-expiry 60)) ; Cache for one minute (def. 16s)

(use-package auth-source
  :custom
  (auth-sources '("~/.authinfo.gpg")) ; Default auth-sources to GPG
  (auth-source-do-cache t) ; Enable caching, do not keep asking about GPG key
  (auth-source-cache-expiry 86400)) ; All day (def. 7200s = 2h)

(use-package epa
  :custom
  (epg-pinentry-mode 'loopback)) ; Force gpg-agent to use minibuffer to prompt for passphrase (GPG 2.1+).

(use-package epa-file
  :after minemacs-first-file
  :demand
  :config
  (+shutup! (epa-file-enable)))

(use-package dired
  ;; Enable adding mail attachments from dired "C-c RET C-a" for
  ;; `gnus-dired-attach'
  :hook (dired-mode . turn-on-gnus-dired-mode)
  :custom
  (dired-dwim-target t)
  (dired-listing-switches "-alFh") ; show files linkes by symlinks (F) and human readable sizes (h)
  (dired-auto-revert-buffer t)
  (dired-movement-style 'cycle)
  (dired-recursive-copies 'always)
  (dired-recursive-deletes 'top)
  (dired-clean-confirm-killing-deleted-buffers nil))

(use-package dired-aux
  :custom
  (dired-vc-rename-file t)
  (dired-create-destination-dirs 'ask)
  :config
  (push '("\\.tgz\\'" . "tar -cf - %i | gzip -c9 > %o") dired-compress-files-alist)
  (push '("\\.tar\\'" . "tar -cf %o %i") dired-compress-files-alist))

(use-package dired-x
  :hook (dired-mode . dired-omit-mode)
  :custom
  (dired-omit-verbose nil)
  :config
  (cl-callf concat dired-omit-files
    "\\|^\\.\\(?:svn\\|git\\|hg\\|repo\\)\\'"
    "\\|^\\.DS_Store\\'"
    "\\|^flycheck_.*"
    "\\|^\\.ccls-cache\\'"
    "\\|^\\.tags\\|\\.clink.db\\|GTAGS\\|GPATH\\|GRTAGS\\'"
    "\\|\\(?:\\.js\\)?\\.meta\\'"
    "\\|\\.\\(?:elc\\|o\\|pyo\\|swp\\|class\\)\\'"))

(use-package doc-view
  :custom
  (doc-view-continuous t)
  (doc-view-mupdf-use-svg (featurep 'feat/rsvg)))

(use-package project
  :straight (project :source gnu-elpa-mirror)
  :commands (project-remember-projects-under)
  :hook (kill-emacs . +project-forget-zombie-projects)
  :custom
  (project-vc-extra-root-markers
   '(".projectile.el" ".project.el" ".project" ; Emacs
     ".repo" ; Repo workspaces
     ".jj" ; Jujutsu
     "autogen.sh" ; Autotools
     "*.csproj" "*.fsproj" "*.vbproj" "*.vcxproj" "*.vdproj" "*.sln" ; Visual Studio
     ".code-workspace" ; VSCode, ".vscode" is present also in the user home
     ".MODULE_NAME_*" "atom.mk" ; Alchemy
     "requirements.txt" ; Python
     ".magic" ; MAX + Mojo
     "package.json" ; Node.js
     "pom.xml" ; Apache Maven (Java/Kotlin)
     "pyproject.toml" ; uv (Python)
     "Cargo.toml")) ; Cargo (Rust)
  :config
  ;; BUG+HACK: Project name should not be inherited from super-projects
  (cl-defmethod project-name ((project (head vc)))
    (let ((proj-root (project-root project)))
      (with-temp-buffer
        (setq default-directory proj-root)
        (let (project-vc-name)
          ;; Apply the `project-vc-name' only if it comes from the ".dir-locals.el" file located in the project's root
          (when-let* ((dir-locals-root (car (ensure-list (dir-locals-find-file (expand-file-name "dummy-file" proj-root)))))
                      (_ (equal (expand-file-name proj-root) (expand-file-name dir-locals-root))))
            (hack-dir-local-variables-non-file-buffer))
          (or project-vc-name
              (cl-call-next-method))))))

  (+add-to-list-at 'project-switch-commands '(project-shell "Shell") (1- (length project-switch-commands)))

  ;; Define some `projectile' wrapper functions on top of `project' (required by
  ;; some packages like `fzf', `neotree', `platformio-mode', etc.)
  (defun projectile-project-p (&optional dir)
    (let ((default-directory (or dir default-directory)))
      (and (project-current) t)))

  (defun projectile-project-root (&optional dir)
    (when-let* ((default-directory (or dir default-directory))
                (proj (project-current)))
      (expand-file-name (project-root proj))))

  (defun projectile-project-name (&optional proj)
    (when-let* ((proj (or proj (project-current))))
      (project-name proj)))

  (defun projectile-project-files (&optional proj-root)
    (when-let* ((default-directory (or proj-root default-directory))
                (proj (project-current)))
      (mapcar #'file-relative-name (project-files proj))))

  (defun projectile-project-buffers (&optional proj)
    (when-let* ((proj (or proj (project-current))))
      (project-buffers proj)))

  (defun projectile-expand-root (name &optional dir)
    (when (projectile-project-p dir)
      (expand-file-name name (projectile-project-root dir))))

  (defun projectile-verify-file (file &optional dir)
    (when-let* ((file (projectile-expand-root file dir)))
      (file-exists-p file)))

  (defun projectile-project-buffer-p (buffer proj-root)
    (and (let ((default-directory proj-root))
           (member buffer (projectile-project-buffers)))
         t))

  (provide 'projectile))

(use-package tab-bar
  :hook (minemacs-lazy . tab-bar-mode)
  :custom
  (tab-bar-format '(tab-bar-format-history tab-bar-format-tabs tab-bar-separator))
  (tab-bar-tab-name-format-function #'+tab-bar-tab-spaced-name-format)
  (tab-bar-close-button-show nil)
  (tab-bar-auto-width-max '((150) 20))
  (tab-bar-tab-hints t)
  (tab-bar-show t)
  :init
  (defcustom +tab-bar-tab-name-function-ignored-buffers '("\\*Bookmark List\\*")
    "Regexps matching buffers to be ignored."
    :type '(repeat regexp)
    :group 'minemacs-ui)
  :config
  (defun +tab-bar-tab-spaced-name-format (tab i)
    (let ((current-p (eq (car tab) 'current-tab)))
      (propertize
       (concat (if tab-bar-tab-hints (format " %c " (+ ?❶ (1- i))) " ")
               (alist-get 'name tab)
               (or (and tab-bar-close-button-show
                        (not (eq tab-bar-close-button-show
                                 (if current-p 'non-selected 'selected)))
                        tab-bar-close-button)
                   ""))
       'face (funcall tab-bar-tab-face-function tab)))))

(use-package editorconfig
  :straight (editorconfig :source nongnu-elpa)
  :hook (minemacs-first-file . editorconfig-mode)
  :init
  (add-hook 'prog-mode-hook #'+editorconfig-guess-style-from-clang-format 80)
  :config
  (add-to-list 'editorconfig-indentation-alist '(protobuf-ts-mode . protobuf-ts-mode-indent-offset)))

(use-package flymake
  :straight (flymake :source gnu-elpa-mirror)
  :hook ((prog-mode conf-mode) . flymake-mode)
  :custom
  (flymake-fringe-indicator-position 'right-fringe)
  (flymake-margin-indicator-position 'right-margin) ; Added in Emacs 30 (see `flymake-indicator-type')
  :config
  (with-eval-after-load 'transient
    (transient-define-prefix +flymake-transient ()
      "Transient for flymake."
      [[("n" "Next error" flymake-goto-next-error :transient t)
        ("p" "Prev error" flymake-goto-prev-error :transient t)]
       [("B" "Buffer diagnostics" flymake-show-buffer-diagnostics :transient t)
        ("P" "Project diagnostics" flymake-show-project-diagnostics :transient t)
        ("L" "Log buffer" flymake-switch-to-log-buffer :transient t)]
       [("S" "Start" flymake-start :transient t)
        ("Q" "Quit" ignore :transient t)]]))

  (with-eval-after-load 'elisp-mode ; Use the session's `load-path' with flymake
    (cl-callf append elisp-flymake-byte-compile-load-path load-path)))

(use-package eshell
  :hook (eshell-mode . minemacs-reduce-font-size)
  :custom
  (eshell-scroll-to-bottom-on-input 'this))

(use-package reftex ;; Inspired by Doom Emacs
  :hook (reftex-toc-mode . reftex-toc-rescan)
  :custom
  ;; Get RefTeX working with BibLaTeX. See: https://tex.stackexchange.com/a/31992/43165
  (reftex-cite-format
   '((?a . "\\autocite[]{%l}")
     (?b . "\\blockcquote[]{%l}{}")
     (?c . "\\cite[]{%l}")
     (?f . "\\footcite[]{%l}")
     (?n . "\\nocite{%l}")
     (?p . "\\parencite[]{%l}")
     (?s . "\\smartcite[]{%l}")
     (?t . "\\textcite[]{%l}"))
   ;; This is needed when `reftex-cite-format' is set. See: https://superuser.com/a/1386206
   (reftex-plug-into-AUCTeX t)
   (reftex-toc-split-windows-fraction 0.3)))

(use-package bibtex
  :hook (bibtex-mode . display-line-numbers-mode)
  :custom
  (bibtex-dialect 'biblatex)
  (bibtex-align-at-equal-sign t)
  (bibtex-text-indentation 20))

(use-package treesit
  :when (featurep 'feat/tree-sitter)
  :hook (treesit--explorer-tree-mode . show-paren-local-mode)
  :custom
  (treesit-font-lock-level 4))

(use-package markdown-ts-mode
  :when (and (featurep 'feat/tree-sitter) (>= emacs-major-version 31)) ; Built-in in Emacs 31+
  :config
  (cl-callf append markdown-ts--code-block-language-map
    '(("emacs-lisp" . elisp)
      ("shell" . bash)))
  (cl-callf append markdown-ts-code-block-source-mode-map
    '((elisp . emacs-lisp-mode)
      (lisp . lisp-mode)
      (scheme . scheme-mode))))

(use-package dockerfile-ts-mode
  :when (featurep 'feat/tree-sitter)
  :mode "/Dockerfile\\'")

(use-package cmake-ts-mode
  :when (featurep 'feat/tree-sitter)
  :mode "CMakeLists\\.txt\\'"
  :mode "\\.cmake\\'")

(use-package autoinsert
  :custom
  (auto-insert-directory (+directory-ensure minemacs-local-dir "auto-insert/")))

(use-package paren
  :custom
  (show-paren-when-point-inside-paren t) ; Highlight when the point is inside the parentheses
  (show-paren-when-point-in-periphery t)) ; Highlight when the point in the periphery of the parentheses

(use-package align
  :bind (("M-[" . +align-code)
         ("C-c [" . align-regexp))
  :config
  ;; Add more C-like modes to the list
  (cl-callf append align-c++-modes '(csharp-mode cuda-mode opencl-c-mode llvm-ts-mode))
  (defun +align-code (beg end &optional arg)
    "Like `align', but indents if called with prefix."
    (interactive "rP")
    (if arg
        (let ((end-mark (copy-marker end)))
          (indent-region beg end-mark nil)
          (align beg end-mark))
      (align beg end))))

(use-package hideif
  :custom
  (hide-ifdef-shadow t)
  (hide-ifdef-initially t))

(use-package hl-line
  :hook ((prog-mode conf-mode text-mode) . hl-line-mode)) ; Highlight the current line

(use-package cc-vars
  :config
  (mapc (lambda (m) (setq-default c-default-style (+alist-set (car m) (cdr m) c-default-style)))
        '((c-mode . "k&r") (c++-mode . "k&r"))))

(use-package c-ts-mode
  :when (featurep 'feat/tree-sitter)
  :custom
  (c-ts-mode-indent-style 'k&r))

(use-package conf-mode
  :mode "\\.prop\\'")

(use-package hideshow
  :hook ((prog-mode conf-mode nxml-mode) . +hs-minor-mode-maybe) ; Hide/show code blocks, a.k.a. code folding
  :custom
  (hs-hide-comments-when-hiding-all nil)
  :bind (:map hs-minor-mode-map
              ("C-c @ C-f"     . +hs-toggle-all)
              ;; The key "à = @" in AZERTY keyboards, the @ need "Alt Gr" to insert it
              ("C-c C-à C-f"   . +hs-toggle-all)
              ("C-c C-à C-h"   . hs-hide-block)
              ("C-c C-à C-s"   . hs-show-block)
              ("C-c C-à C-M-h" . hs-hide-all)
              ("C-c C-à C-M-s" . hs-show-all)
              ("C-c C-à C-l"   . hs-hide-level)
              ("C-c C-à C-c"   . hs-toggle-hiding)
              ("C-c C-à C-a"   . hs-show-all)
              ("C-c C-à C-t"   . hs-hide-all)
              ("C-c C-à C-d"   . hs-hide-block)
              ("C-c C-à C-e"   . hs-toggle-hiding))
  :init
  (defun +hs-minor-mode-maybe () ; Fail sailently
    (condition-case err (hs-minor-mode 1) (error (+log! "`hs-minor-mode': %s" (error-message-string err)))))
  :config
  (defun +hs-toggle-all ()
    (interactive)
    (if (cl-some (+apply-partially-right #'overlay-get 'hs) (overlays-in (point-min) (point-max)))
        (hs-show-all)
      (hs-hide-all)))

  ;; Add extra modes support
  (unless (assq 't hs-special-modes-alist)
    (cl-callf2 append
        '((vimrc-mode "{{{" "}}}" "\"")
          (ruby-mode "class\\|d\\(?:ef\\|o\\)\\|module\\|[[{]"
                     "end\\|[]}]"
                     "#\\|=begin"
                     ruby-forward-sexp)
          (matlab-mode "if\\|switch\\|case\\|otherwise\\|while\\|for\\|try\\|catch"
                       "end"
                       nil (lambda (_arg) (matlab-forward-sexp)))
          (nxml-mode "<!--\\|<[^/>]*[^/]>"
                     "-->\\|</[^/>]*[^/]>"
                     "<!--" sgml-skip-tag-forward nil)
          (latex-mode
           ;; LaTeX-find-matching-end needs to be inside the env
           ("\\\\begin{[a-zA-Z*]+}\\(\\)" 1)
           "\\\\end{[a-zA-Z*]+}"
           "%"
           (lambda (_arg)
             ;; Don't fold whole document, that's useless
             (unless (save-excursion (search-backward "\\begin{document}" (line-beginning-position) t))
               (LaTeX-find-matching-end)))
           nil))
        hs-special-modes-alist '((t)))))

(use-package xref
  :straight (xref :source gnu-elpa-mirror)
  :hook (xref--xref-buffer-mode . minemacs-reduce-font-size)
  :custom
  ;; Use completion in the minibuffer instead of definitions buffer
  (xref-show-definitions-function #'xref-show-definitions-completing-read)
  ;; Show references in a separate buffer, this is more convenient especially in big codebases
  (xref-show-xrefs-function #'xref-show-definitions-buffer)
  (xref-prompt-for-identifier
   '(not xref-find-definitions xref-find-definitions-other-window xref-find-definitions-other-frame ; The default value
         xref-find-references)) ; We add `xref-find-references', which causes problems on big codebases
  ;; NOTE: Usually, this shorcut can be bound to moves the window (set by the OS
  ;; window manager), so we need to disable it in the WM for this to work.
  :bind ("M-<down-mouse-1>" . xref-find-references-at-mouse)
  :config
  ;; Truncate lines in the references buffer
  (+setq-hook! xref--xref-buffer-mode truncate-lines t))

(use-package eglot
  :straight (eglot :source gnu-elpa-mirror)
  :custom
  (eglot-autoshutdown t) ; shutdown after closing the last managed buffer
  (eglot-sync-connect 0) ; async, do not block
  (eglot-extend-to-xref t) ; can be interesting!
  (eglot-report-progress nil) ; disable annoying messages in echo area!
  (eglot-stay-out-of '(yasnippet))
  :config
  ;; PERF: Optimization, inspired by: https://reddit.com/r/emacs/comments/1gv556t/comment/lxzbfw8
  (unless minemacs-debug-p
    (cl-callf plist-put eglot-events-buffer-config :size 0) ; Disable logs in `eglot-events-buffer' (def. 2000000)
    (with-eval-after-load 'jsonrpc ; Disable logging in `jsonrpc'
      (fset 'jsonrpc--log-event #'ignore)
      (remove-hook 'jsonrpc-event-hook 'jsonrpc--log-event)))

  ;; When a sub/super project with a separate Python virtual environment is detected,
  ;; limit to this one.
  ;; See: https://lists.gnu.org/archive/html/emacs-devel/2022-11/msg01087.html
  (defun +project-find-virtualenv-for-eglot (dir)
    (when (bound-and-true-p eglot-lsp-context)
      (when-let* ((root (locate-dominating-file dir ".virtualenv")))
        (cons 'transient root))))

  (add-hook 'project-find-functions #'+project-find-virtualenv-for-eglot))

(use-package imenu
  :custom
  (imenu-max-item-length 120)) ; Show longer definitions (def. 60)

(use-package eldoc
  :straight (eldoc :source gnu-elpa-mirror)
  :custom
  (eldoc-documentation-strategy #'eldoc-documentation-compose))

(use-package comint
  :hook (comint-mode . minemacs-reduce-font-size)
  :commands (+comint-clear-buffer)
  :bind (:map comint-mode-map ("C-l" . +comint-clear-buffer))
  :custom
  (comint-scroll-to-bottom-on-input 'this) ; Move to bottom on input in the current window
  (comint-scroll-to-bottom-on-output 'this) ; Move to bottom on output in the current window
  (comint-buffer-maximum-size (* 64 1024)) ; Increase the maximum buffer size (def. 1024)
  (comint-input-ring-size 5000) ; Increase the size of the input history ring (def. 500)
  :config
  (defun +comint-clear-buffer ()
    "Clears the current comint buffer, removing all its content."
    (interactive)
    (when (derived-mode-p 'comint-mode)
      (let ((comint-buffer-maximum-size 0))
        (comint-truncate-buffer)))))

(use-package compile
  :hook
  (compilation-filter . ansi-color-compilation-filter) ; Enable ANSI colors in compilation buffer
  (shell-mode . compilation-shell-minor-mode)
  (compilation-mode . minemacs-reduce-font-size)
  :custom
  (compilation-scroll-output t) ; Keep scrolling the compilation buffer, `first-error' can be interesting
  (compilation-always-kill t) ; Always kill current compilation process before starting a new one
  (compilation-skip-visited t) ; Skip visited messages on compilation motion commands
  (compilation-window-height 12) ; Keep it readable
  (compilation-buffer-name-function #'+compilation--project-prefix-buffer-name)
  :config
  ;; Integration of `compile' with `savehist'
  (with-eval-after-load 'savehist
    (add-to-list 'savehist-additional-variables 'compile-history))
  ;; When compiling in a super-project or a project, use its name as a prefix
  (defun +compilation--project-prefix-buffer-name (mode)
    (if-let* ((default (compilation--default-buffer-name mode))
              (proj (or (+super-project-current) (project-current)))
              (proj (project-name proj)))
        (concat "*" proj ":" (string-remove-prefix "*" default))
      default)))

(use-package nxml-mode
  :mode "\\.xmpi\\'"
  :hook (nxml-mode . sgml-electric-tag-pair-mode)) ; Auto rename matching tags

(use-package elisp-mode
  :after minemacs-first-elisp-file ; prevent elisp-mode from being loaded too early
  :custom-face ; better the default cyan color!
  (elisp-shorthand-font-lock-face ((t :inherit font-lock-keyword-face :foreground "red")))
  :init
  (+setq-hook! emacs-lisp-mode tab-width 8)) ; to view built-in packages correctly

(use-package gdb-mi
  :custom
  (gdb-show-main t) ; display source file containing main routine at startup
  (gdb-many-windows t) ; start in gdb-many-windows mode
  (gdb-debug-log-max 1024) ; default 128
  (gdb-restore-window-configuration-after-quit t)
  (gdb-thread-buffer-verbose-names nil)
  (gdb-max-source-window-count 1) ; IDEA: maybe increase it!
  (gdb-display-io-buffer nil) ; don't display a separate IO buffer (Emacs 30.1+)
  (gdb-display-io-nopopup nil)) ; in case we enabled the IO buffer, we don't want it to popup when hidden

(use-package org
  :straight (org :source gnu-elpa-mirror)
  :defer 10
  :preface
  ;; Set to the default value, this can be overwritten in the user config file.
  (setq org-directory minemacs-default-org-dir)
  :custom
  (org-persist-directory (+directory-ensure minemacs-cache-dir "org/persist/"))
  (org-preview-latex-image-directory (+directory-ensure minemacs-cache-dir "org/preview/latex-image/"))
  (org-publish-timestamp-directory (+directory-ensure minemacs-cache-dir "org/publish/timestamps/"))
  (org-id-locations-file (concat minemacs-cache-dir "org/id-locations.el"))
  (org-auto-align-tags nil)
  (org-cycle-hide-block-startup t)
  (org-edit-src-auto-save-idle-delay auto-save-timeout) ; use the defaults
  (org-edit-src-content-indentation 0) ; do not indent the content of src blocks
  (org-edit-src-turn-on-auto-save t) ; auto-save org-edit-src
  (org-ellipsis " ↩")
  (org-export-in-background t) ; run export processes in external emacs process
  (org-export-with-broken-links 'mark) ; Do not rise error on broken links, but mark them in the output file
  (org-export-with-smart-quotes t) ; convert "this" to « this »
  (org-export-with-sub-superscripts '{}) ; Only explicit _{} ^{} are interpreted as sub/superscripts
  (org-fold-catch-invisible-edits 'smart) ; try not to accidentally do weird stuff in invisible regions
  (org-fontify-quote-and-verse-blocks t)
  (org-hide-emphasis-markers t)
  (org-highlight-latex-and-related '(native latex script entities))
  (org-insert-heading-respect-content t)
  (org-list-allow-alphabetical t) ; have a. A. a) A) list bullets
  (org-log-done 'time) ; having the time an item is done sounds convenient
  (org-pretty-entities t)
  (org-pretty-entities-include-sub-superscripts t)
  (org-return-follows-link t) ; RET follows link (a key bind has to be defined for Evil, (see `me-evil'))
  (org-special-ctrl-a/e t)
  (org-startup-indented nil)
  (org-tags-column 0)
  (org-use-property-inheritance t) ; it's convenient to have properties inherited
  (org-use-sub-superscripts '{}) ; Do the same when rendering the Org buffer
  :config
  (setq org-export-async-debug minemacs-debug-p) ;; Can be useful!

  ;; TEMP: This solve the "Invalid face reference: org-indent [X times]" problem.
  (require 'org-indent)

  ;; Dynamically change font size for Org heading levels, starting from
  ;; `+org-level-base-size', and shrinking by a factor of 0.9 at each level.
  (defvar +org-level-base-size 1.3)

  (dotimes (level 8)
    (let ((size (max 1.0 (* +org-level-base-size (expt 0.9 level)))))
      (set-face-attribute
       (intern (format "org-level-%d" (1+ level))) nil
       :weight 'bold
       :height size)))

  (setopt org-babel-load-languages
          (cl-loop
           for lang in '(C R js dot awk sed sql org shell ditaa latex julia sqlite octave
                           maxima eshell scheme python fortran gnuplot plantuml makefile)
           collect (cons lang t)))

  (with-eval-after-load 'org-src
    (+alist-set "dot" 'graphviz-dot org-src-lang-modes))

  (with-eval-after-load 'plantuml-mode
    (setq org-plantuml-jar-path plantuml-jar-path
          org-plantuml-exec-mode plantuml-default-exec-mode
          org-plantuml-executable-path plantuml-executable-path))

  ;; From Doom Emacs
  (with-no-warnings
    (custom-declare-face '+org-todo-active  '((t (:inherit (bold font-lock-constant-face org-todo)))) "")
    (custom-declare-face '+org-todo-project '((t (:inherit (bold font-lock-doc-face org-todo)))) "")
    (custom-declare-face '+org-todo-onhold  '((t (:inherit (bold warning org-todo)))) "")
    (custom-declare-face '+org-todo-cancel  '((t (:inherit (bold error org-todo)))) ""))

  (setq org-todo-keywords
        '((sequence
           "TODO(t)"  ; A task that needs doing & is ready to do
           "PROJ(p)"  ; A project, which usually contains other tasks
           "LOOP(r)"  ; A recurring task
           "STRT(s)"  ; A task that is in progress
           "WAIT(w)"  ; Something external is holding up this task
           "HOLD(h)"  ; This task is paused/on hold because of me
           "IDEA(i)"  ; An unconfirmed and unapproved task or notion
           "|"
           "DONE(d)"  ; Task successfully completed
           "KILL(k)") ; Task was cancelled, aborted or is no longer applicable
          (sequence
           "[ ](T)"   ; A task that needs doing
           "[-](S)"   ; Task is in progress
           "[?](W)"   ; Task is being held up or paused
           "|"
           "[X](D)")  ; Task was completed
          (sequence
           "|"
           "OKAY(o)"
           "YES(y)"
           "NO(n)"))
        org-todo-keyword-faces
        '(("[-]"  . +org-todo-active)
          ("STRT" . +org-todo-active)
          ("[?]"  . +org-todo-onhold)
          ("WAIT" . +org-todo-onhold)
          ("HOLD" . +org-todo-onhold)
          ("PROJ" . +org-todo-project)
          ("NO"   . +org-todo-cancel)
          ("KILL" . +org-todo-cancel))))

(use-package org-agenda
  :custom
  (org-agenda-tags-column 0))

(use-package ox-latex
  :custom
  (org-latex-src-block-backend 'engraved)
  (org-latex-prefer-user-labels t)
  (org-latex-tables-booktabs t)
  (org-latex-minted-options ; Default `minted` options, can be overwritten in file/dir locals
   '(("frame"         "lines")
     ("fontsize"      "\\footnotesize")
     ("tabsize"       "2")
     ("breaklines"    "true")
     ("breakanywhere" "true") ; break anywhere, not just on spaces
     ("style"         "default")
     ("bgcolor"       "GhostWhite")
     ("linenos"       "true")))
  :config
  ;; (setq org-latex-line-break-safe "\\\\")
  ;; Add this to your config to be able to export with minted:
  ;; (with-eval-after-load 'ox-latex
  ;;   (add-to-list 'org-latex-packages-alist '("" "minted"))
  ;;   (add-to-list 'org-latex-packages-alist '("svgnames" "xcolor"))
  ;;   (setq org-latex-src-block-backend 'minted
  ;;         org-latex-pdf-process '("latexmk -f -pdf -%latex -shell-escape -interaction=nonstopmode -output-directory=%o %f")))

  ;; Map some org-mode blocks' languages to lexers supported by minted
  ;; you can see supported lexers by running this command in a terminal:
  ;; 'pygmentize -L lexers'
  (dolist (pair '((ipython    "python")
                  (jupyter    "python")
                  (scheme     "scheme")
                  (lisp-data  "lisp")
                  (conf-unix  "unixconfig")
                  (conf-space "unixconfig")
                  (authinfo   "unixconfig")
                  (gdb-script "unixconfig")
                  (conf-toml  "yaml")
                  (conf       "ini")
                  (gitconfig  "ini")
                  (systemd    "ini")))
    (unless (member pair org-latex-minted-langs)
      (add-to-list 'org-latex-minted-langs pair)))

  (cond
   ((executable-find "latexmk")
    (setq org-latex-pdf-process
          '("latexmk -c -bibtex-cond1 %f" ; ensure cleaning ".bbl" files
            "latexmk -f -pdf -%latex -shell-escape -interaction=nonstopmode -output-directory=%o %f")))
   ;; NOTE: Tectonic might have some issues with some documents (sagej + natbib)
   ((executable-find "tectonic")
    (setq org-latex-pdf-process
          '("tectonic -X compile --outdir=%o -Z shell-escape -Z continue-on-errors %f")))))

(use-package ox
  :config
  (mapc #'require '(ox-odt ox-beamer ox-koma-letter)))

(use-package oc
  :custom
  (org-cite-export-processors '((latex biblatex) (t csl)))
  (org-support-shift-select t)
  :config
  (mapc #'require '(oc-csl oc-natbib oc-biblatex)))

(use-package ob-ditaa
  :config
  ;; Automatically download the latest version of Ditaa
  (setopt org-ditaa-jar-path (+github-download-release "stathissideris/ditaa" "ditaa-.*-standalone.jar" nil :ver "v0.11.0")))

(use-package ol-man
  :after ol
  :demand)

(use-package electric
  :config
  ;; Electric indent on delete and enter
  (setq-default electric-indent-chars '(?\n ?\^?))

  (defvar-local +electric-indent-words nil
    "The list of electric words.
Typing these will trigger reindentation of the current line.")

  ;; Electric indent at Bash/Sh keywords, extracted from the grammar
  (+setq-hook! (sh-mode bash-ts-mode)
    +electric-indent-words (seq-uniq (flatten-list (alist-get :smie-closer-alist sh-smie-sh-grammar))))

  (defun +electric-indent-char-fn (_c) ; Inspired by Doom Emacs
    (when (and (eolp) +electric-indent-words)
      (save-excursion
        (backward-word)
        (looking-at-p (concat "\\<" (regexp-opt +electric-indent-words))))))
  (add-hook 'electric-indent-functions #'+electric-indent-char-fn))

(use-package ediff
  :hook (ediff-before-setup . +ediff--save-window-config-h)
  :custom
  (ediff-split-window-function #'split-window-horizontally) ; Split horizontally
  (ediff-window-setup-function #'ediff-setup-windows-plain) ; Setup all windows in one frame
  :config
  (defvar +ediff--saved-window-config nil)

  ;; Save the current window configuration (hooked to `ediff-before-setup-hook')
  (defun +ediff--save-window-config-h ()
    (setq +ediff--saved-window-config (current-window-configuration)))

  ;; Restore the saved window configuration on quit or suspend
  (defun +ediff--restore-window-config-h ()
    (when (window-configuration-p +ediff--saved-window-config)
      (set-window-configuration +ediff--saved-window-config)))

  (dolist (hook '(ediff-quit-hook ediff-suspend-hook))
    (add-hook hook #'+ediff--restore-window-config-h 99)))

(use-package smerge-mode
  :commands (+smerge-first +smerge-last +smerge-vc-next-conflict-recenter)
  :config
  (defun +smerge-first ()
    "Got to the first occurrence."
    (interactive)
    (goto-char (point-min))
    (smerge-next))

  (defun +smerge-last ()
    "Got to the last occurrence."
    (interactive)
    (goto-char (point-max))
    (smerge-prev))

  (defun +smerge-vc-next-conflict-recenter ()
    "Like `smerge-vc-next-conflict' but recenters the buffer."
    (interactive)
    (smerge-vc-next-conflict)
    ;; Often, after calling `smerge-vc-next-conflict', the cursor will land at
    ;; the bottom of the window.
    (recenter-top-bottom (/ (window-height) 8)))

  (defun +smerge-next-recenter ()
    "Like `smerge-next' but recenters the buffer."
    (interactive)
    (smerge-next)
    (recenter-top-bottom (/ (window-height) 8)))

  (defun +smerge-prev-recenter ()
    "Like `smerge-prev' but recenters the buffer."
    (interactive)
    (smerge-prev)
    (recenter-top-bottom (/ (window-height) 8))))

(use-package octave
  :mode ("\\.m\\'" . octave-maybe-mode))

(use-package bookmark
  :custom
  (bookmark-save-flag 1) ; Save the bookmarks every time a bookmark is made
  :bind (("<left-fringe> <double-mouse-1>" . +bookmark-set-at-mouse)) ; double click on fringe creates a bookmark
  :config
  (defun +bookmark-set-at-mouse (event)
    (interactive "e")
    (save-excursion
      (mouse-set-point event)
      (bookmark-set
       (truncate-string-to-width
        (format "%s: %s" (buffer-name) (string-trim (buffer-substring-no-properties (line-beginning-position) (line-end-position))))
        60 nil nil t))))
  (push bookmark-default-file +first-file-hook-ignore-list)
  (+ignore-root bookmark-default-file))

(use-package recentf
  :custom
  (recentf-max-saved-items 500) ; Increase the maximum number of saved items (def. 20)
  (recentf-case-fold-search t) ; Ignore case when searching recentf files
  (recentf-save-file (concat minemacs-local-dir "recentf")) ; Needed, otherwise Emacs will still create a file under "~/.emacs.d"
  (recentf-exclude ; Exclude some files from being remembered by recentf
   `(file-remote-p
     ,(rx (or "/elfeed-db/" "/eln-cache/" "/cache/" "/.maildir/" "/.cache/"))
     ,(rx bol "/tmp/")))
  :bind (("C-c c r" . recentf-open-files))
  :init
  ;; Enable `recentf-mode' to remember recent files
  (+shutup! (recentf-mode 1))
  :config
  (add-to-list 'recentf-exclude +serialized-symbols-directory))

(use-package url
  :custom
  (url-cookie-file (concat minemacs-local-dir "url/cookie.el"))
  (url-history-file (concat minemacs-local-dir "url/history.el")))

(use-package webjump
  :custom
  (webjump-sites
   '(("Emacs Wiki"    . [simple-query "www.emacswiki.org" "www.emacswiki.org/cgi-bin/wiki/" ""])
     ("DuckDuckGo"    . [simple-query "duckduckgo.com" "duckduckgo.com/?q=" ""])
     ("Qwant"         . [simple-query "www.qwant.com" "www.qwant.com/?q=" ""])
     ("Ecosia"        . [simple-query "www.ecosia.org" "www.ecosia.org/search?q=" ""])
     ("Brave"         . [simple-query "search.brave.com" "search.brave.com/search?q=" ""])
     ("Bing"          . [simple-query "www.bing.com" "www.bing.com/search?q=" ""])
     ("Yahoo"         . [simple-query "www.yahoo.com" "search.yahoo.com/search?p=" ""])
     ("Google"        . [simple-query "www.google.com" "www.google.com/search?q=" ""])
     ("Google Maps"   . [simple-query "www.google.com" "www.google.com/maps?q=" ""])
     ("Google Images" . [simple-query "www.google.com" "www.google.com/images?q=" ""])
     ("Google Groups" . [simple-query "groups.google.com" "groups.google.com/groups?q=" ""])
     ("StackOverflow" . [simple-query "stackoverflow.com" "stackoverflow.com/search?q=" ""])
     ("GitHub Repo"   . [simple-query "github.com" "github.com/search?type=repositories&q=" ""])
     ("GitHub Code"   . [simple-query "github.com" "github.com/search?type=code&q=" ""])
     ("WolframAlpha"  . [simple-query "wolframalpha.com" "wolframalpha.com/input/?i=" ""])
     ("MDN"           . [simple-query "developer.mozilla.org" "developer.mozilla.org/search?q=" ""])
     ("Youtube"       . [simple-query "www.youtube.com" "www.youtube.com/results?search_query=" ""])
     ("Reddit"        . [simple-query "www.reddit.com" "www.reddit.com/search/?q=" ""])
     ("Wikipedia"     . [simple-query "wikipedia.org" "wikipedia.org/wiki/" ""]))))

(use-package time-stamp
  :hook (before-save . time-stamp) ; Update time stamp (if available) before saving a file.
  :custom
  (time-stamp-active t) ; Do enable time-stamps
  (time-stamp-line-limit 12) ; Check the first 12 buffer lines for Time-stamp: <>
  (time-stamp-format "%04Y-%02m-%02d %02H:%02M:%02S")) ; Timestamp format

(use-package whitespace
  :custom
  (whitespace-action '(cleanup auto-cleanup))) ; Default behavior for `whitespace-cleanup'

(use-package autorevert
  :hook (minemacs-first-file . global-auto-revert-mode) ; Auto load files changed on disk
  :custom
  (global-auto-revert-non-file-buffers t) ; Revert non-file buffers like dired
  (auto-revert-verbose minemacs-verbose-p)
  :config
  ;; HACK: Avoid delays when auto reverting buffers. This is based on saving the
  ;; modification time of the file on save and on buffer switch.
  (defvar-local +auto-revert-buffer-time nil)
  (defun +file-mtime (file)
    (when-let* ((file-attr (and file (file-exists-p file) (file-attributes file))))
      (file-attribute-modification-time file-attr)))

  (defun +auto-revert--save-file-mtime (&rest _args)
    (+log! "Saving modification time for %S" buffer-file-name)
    (setq +auto-revert-buffer-time (+file-mtime buffer-file-name)))

  (add-hook 'after-save-hook #'+auto-revert--save-file-mtime)
  (advice-add 'after-find-file :after #'+auto-revert--save-file-mtime)

  (defun +auto-revert--on-buffer-switch-h (_frame)
    (unless +auto-revert-buffer-time
      (setq +auto-revert-buffer-time (+file-mtime buffer-file-name)))
    (when-let* ((mtime (+file-mtime buffer-file-name)))
      (unless (equal mtime +auto-revert-buffer-time)
        (+log! "File %S modified externally, reverting immediately!" buffer-file-name)
        (+shutup! (revert-buffer t t)))))

  (add-hook 'window-buffer-change-functions #'+auto-revert--on-buffer-switch-h))

(use-package savehist
  :hook (minemacs-lazy . savehist-mode) ; Save history
  :custom
  (savehist-additional-variables ; Save clipboard, marks, macros, etc.
   '(kill-ring register-alist mark-ring global-mark-ring search-ring regexp-search-ring)))

(use-package saveplace
  :hook (minemacs-first-file . save-place-mode) ; Save place in files
  :custom
  (save-place-limit 1000))

(use-package term
  :hook (term-mode . minemacs-reduce-font-size)
  :config
  ;; Kill `term' buffer on exit (reproduce a similar behavior to `shell's
  ;; `shell-kill-buffer-on-exit').
  (advice-add 'term-sentinel :around #'+kill-buffer-after-sentinel-exit))

(use-package executable
  ;; Make scripts (files starting with shebang "#!") executable when saved
  :hook (after-save . executable-make-buffer-file-executable-if-script-p))

(use-package display-line-numbers
  :hook ((prog-mode conf-mode text-mode) . display-line-numbers-mode) ; Show line numbers
  :custom
  (display-line-numbers-width 4) ; Width for line numbers
  (display-line-numbers-widen t)) ; Display absolute line numbers in narrowed regions

(use-package pixel-scroll
  :hook (minemacs-lazy . pixel-scroll-precision-mode)
  :custom
  (pixel-scroll-precision-use-momentum t)) ; Better scrolling on Emacs29+, specially on a touchpad

(use-package mouse
  :hook (minemacs-lazy . context-menu-mode) ; Enable context menu on mouse right click
  :custom
  (mouse-drag-and-drop-region t) ; Enable Drag-and-Drop of regions
  (mouse-drag-and-drop-region-cross-program t)) ; Enable Drag-and-Drop of regions from Emacs to external programs

(use-package mwheel
  :custom
  (mouse-wheel-scroll-amount ; Make mouse scroll a little faster
   '(2 ((shift) . hscroll) ((meta) . nil) ((control meta) . global-text-scale) ((control) . text-scale)))
  (mouse-wheel-scroll-amount-horizontal 2)) ; Make mouse scroll a little faster horizontally

(use-package gnus
  :custom
  (gnus-dribble-directory (+directory-ensure minemacs-local-dir "gnus/dribble/"))
  (gnus-init-file (concat minemacs-config-dir "gnus/init.el"))
  (gnus-startup-file (concat minemacs-config-dir "gnus/newsrc")))

(use-package time
  :hook (minemacs-lazy . display-time-mode) ; Display time in mode-line
  :custom
  (display-time-string-forms '((propertize (concat 24-hours ":" minutes))))) ; Enable time in the mode-line

(use-package calendar
  :custom
  (calendar-date-style 'iso) ; year/month/day
  (calendar-week-start-day 1)) ; Week starts on Monday

(use-package frame
  :hook (minemacs-lazy . window-divider-mode) ; Display divider between windows
  :custom
  ;; Set line width for the divider in `window-divider-mode' to 2px
  (window-divider-default-bottom-width 2)
  (window-divider-default-right-width 2))

(use-package repeat
  :after minemacs-lazy
  :init
  (+shutup! (repeat-mode 1))) ; Enable repeat mode, "C-x o then C-x o" becomes "C-x o o"

(use-package server
  :autoload server-running-p
  :init
  ;; When we start in a non-daemon Emacs, we start a server when Emacs is idle.
  (unless (daemonp)
    (+lazy!
     (unless (server-running-p)
       (let ((inhibit-message t))
         (server-start nil t)
         (+info! "Started Emacs daemon in background."))))))

(use-package speedbar ; config from Crafted Emacs
  :custom
  (speedbar-update-flag t) ; Auto-update when the attached frame changes directory
  (speedbar-use-images nil) ; Disable icon images, instead use text
  (speedbar-frame-parameters ; Customize Speedbar Frame
   '((name . "speedbar")
     (title . "speedbar")
     (minibuffer . nil)
     (border-width . 2)
     (menu-bar-lines . 0)
     (tool-bar-lines . 0)
     (unsplittable . t)
     (left-fringe . 10)))
  :config
  ;; File Extensions
  (speedbar-add-supported-extension
   '(;; Classic Lisp Languages
     ".cl" ".el" ".scm" ".lisp"
     ;; Lua/Fennel (Lisp that transpiles to lua)
     ".lua" ".fnl" ".fennel"
     ;; JVM languages (Java, Kotlin, Clojure)
     ".java" ".kt" ".mvn" ".gradle" ".properties" ".clj"
     ;; C/C++
     ".c" ".cpp" ".cc" ".h" ".hh" ".hpp"
     ;; Shell scripts
     ".sh" ".bash"
     ;; Web Languages and Markup/Styling
     ".php" ".js" ".ts" ".html" ".htm" ".css" ".less" ".scss" ".sass"
     ;; Makefile
     "makefile" "MAKEFILE" "Makefile"
     ;; Data formats
     ".json" ".yaml" ".toml"
     ;; Notes and Markup
     ".md" ".markdown" ".org" ".txt" "README")))

(use-package simple
  :init
  (setq-default indent-tabs-mode nil) ; Never mix, use only spaces
  :hook
  (minemacs-lazy . line-number-mode) ; Show line number in mode-line
  (minemacs-lazy . column-number-mode) ; Show column numbers (a.k.a. cursor position) in the mode-line
  (minemacs-lazy . size-indication-mode) ; Display buffer size on mode line
  ((prog-mode conf-mode org-mode) . visual-line-mode) ; Wrap long lines
  :custom
  (kill-do-not-save-duplicates t) ; Filter duplicate entries in kill ring
  (save-interprogram-paste-before-kill t)) ; Save existing clipboard text into the kill ring before replacing it.

(use-package bug-reference
  :hook ((prog-mode conf-mode) . bug-reference-prog-mode)
  :config
  (put 'bug-reference 'face '+goto-addr-url-face))

(use-package goto-addr
  :hook ((prog-mode conf-mode) . goto-address-prog-mode)
  :custom
  (goto-address-url-face '+goto-addr-url-face))

(use-package visual-wrap
  :when (>= emacs-major-version 30)
  :hook ((prog-mode conf-mode org-mode) . visual-wrap-prefix-mode)) ; Respect indentation whein wrapping long lines

(use-package winner
  :hook (minemacs-lazy . winner-mode)) ; Window layout undo/redo (`winner-undo' / `winner-redo')

(use-package delsel
  :hook (minemacs-lazy . delete-selection-mode)) ; Replace selection after start typing

(use-package mb-depth
  :hook (minemacs-lazy . minibuffer-depth-indicate-mode)) ; Show recursion depth in minibuffer (see `enable-recursive-minibuffers')

(use-package subword
  :hook (minemacs-lazy . global-subword-mode)) ; Global SubWord mode

(use-package battery
  :hook (minemacs-lazy . display-battery-mode))

(use-package window
  :bind (("<f8>" . window-toggle-side-windows))
  :init
  ;; NOTE: Set `display-buffer-alist' via `setopt' instead of `:custom' to
  ;; ensure showing warnings when the condition isn't correct
  (setopt
   display-buffer-alist
   `((,(lambda (buff-or-name &rest _args)
         (with-current-buffer (get-buffer buff-or-name)
           (or ; Generic way of detecting interactive modes
            (string-match-p "\\(inferior\\|repl\\|interactive\\|-comint\\)-" (symbol-name major-mode))
            (string-match-p (rx bol "*" (or "imaxima" "lua" "Lua" "Nix-REPL" "forth" "julia" "sbt") "*") (buffer-name)))))
      (display-buffer-in-side-window)
      (side . right)
      (slot . 1)
      (dedicated . t)
      (window-width . 80)
      (reusable-frames . visible))
     (,(+make-buffer-conds
        'help-mode 'helpful-mode 'Info-mode 'Man-mode 'woman-mode 'tldr-mode 'dictionary-mode 'lexic-mode
        (rx bol "*" (or "Metahelp" "Printing Help" "Org Entity Help"
                        (seq (or "eldoc" "Tcl help" "eglot-help for " "shellcheck:" "show-marks") (* any)))
            "*" eol))
      (display-buffer-in-side-window)
      (window-width . 85)
      (side . right)
      (slot . 0))
     (,(+make-buffer-conds 'ibuffer-mode 'Buffer-menu-mode)
      (display-buffer-in-side-window)
      (window-width . 100)
      (side . right)
      (slot . 1))
     (,(+make-buffer-conds
        'term-mode 'eshell-mode 'shell-mode 'vterm-mode 'eat-mode
        (rx bol "*" (or "eshell" "vterm" "vterminal" "shell" "terminal") (* any) "*"))
      (display-buffer-in-side-window)
      (window-height . 0.2)
      (reusable-frames . visible)
      (dedicated . t)
      (side . bottom)
      (slot . -1))
     (,(+make-buffer-conds
        'compilation-mode 'bookmark-bmenu-mode 'messages-buffer-mode 'backtrace-mode 'quickrun--mode
        "\\*\\(?:Compile-Log\\|Warnings\\|envrc\\|Pp Eval Output\\)\\*")
      (display-buffer-in-side-window)
      (window-height . 0.2)
      (side . bottom)
      (slot . 0))
     (,(+make-buffer-conds
        'flymake-diagnostics-buffer-mode 'flymake-project-diagnostics-mode 'xref--xref-buffer-mode
        "\\*Completions")
      (display-buffer-in-side-window)
      (window-height . 0.2)
      (side . bottom)
      (slot . 1))
     (,(+make-buffer-conds 'grep-mode 'occur-mode 'rg-mode "\\*find\\*")
      (display-buffer-in-side-window)
      (window-height . 0.2)
      (side . bottom)
      (slot . 2)))))

(use-package windmove
  :after minemacs-lazy
  :demand
  :config
  (windmove-default-keybindings 'shift) ; Navigate windows using Shift+Direction
  (defvar-keymap +windmove-keys
    :repeat t ; Make it work with `repeat-mode'
    "k" #'windmove-up
    "j" #'windmove-down
    "h" #'windmove-left
    "l" #'windmove-right)
  (keymap-global-set "C-c w" +windmove-keys))

(use-package grep
  :hook (grep-mode . minemacs-reduce-font-size)
  :custom
  (grep-use-headings t)) ; subdivide grep output into sections, one per file like `rg' (Emacs 30)

(use-package isearch
  :custom
  (isearch-lazy-count t) ; Show the match count (need a non-nil `isearch-lazy-highlight')
  (search-ring-max 200) ; 16 is too little
  (regexp-search-ring-max 200)
  :bind (;; In AZERTY keyboards, the "%" is inserted as "S-ù", so lets bing "ù" to save pressing the shift key
         ("M-ù" . query-replace)
         ("C-M-ù" . query-replace-regexp)
         :map isearch-mode-map
         ("<up>" . isearch-ring-retreat)
         ("<down>" . isearch-ring-advance)
         ("M-i" . +insert-thing-at-point)))

(use-package re-builder
  :commands (+reb-replace-regexp)
  :config
  (defvar-local +reb--points nil "Store point and region bounds before calling `re-builder'.")

  (defun +re-builder-save-state:before-a (&rest _args)
    (setq +reb--points (cons (point) (when (region-active-p) (list (region-beginning) (region-end))))))

  (advice-add 're-builder :before #'+re-builder-save-state:before-a)

  ;; Adapted from: https://karthinks.com/software/bridging-islands-in-emacs-1
  (defun +reb-replace-regexp (&optional delimited backward)
    "Run `query-replace-regexp' with the contents of `re-builder'.
With non-nil optional argument DELIMITED, only replace matches
surrounded by word boundaries."
    (interactive "P")
    (unless (derived-mode-p '(reb-mode reb-lisp-mode))
      (user-error "Not in a `regexp-builder' buffer"))
    (reb-update-regexp)
    (let* ((re (reb-target-value 'reb-regexp))
           (replacement
            (query-replace-read-to
             re
             (concat "Query replace"
                     (if current-prefix-arg
                         (if (eq current-prefix-arg '-) " backward" " word")
                       "")
                     " regexp"
                     (if (with-selected-window reb-target-window (region-active-p)) " in region" ""))
             t)))
      (with-selected-window reb-target-window
        (let ((pnt (car +reb--points))
              (beg (cadr +reb--points))
              (end (caddr +reb--points)))
          ;; replace with (goto-char (match-beginning 0)) if you want
          ;; to control where in the buffer the replacement starts
          ;; with re-builder
          (goto-char pnt)
          (setq +reb--points nil)
          (reb-quit)
          (query-replace-regexp re replacement delimited beg end backward))))))

(use-package yaml-ts-mode
  :when (featurep 'feat/tree-sitter)
  :mode (rx (any ?. ?_) (or "clang-format" "clang-tidy") eol))


(use-package hexl
  :autoload (+hexl-buffer-p)
  :init
  (defcustom +hexl-auto-enable t
    "Enable or disable opening suitable files in `hexl-mode'."
    :group 'minemacs-binary
    :type 'boolean)
  ;; Add the fallback predicate near the end, `objdump-disassemble' predicate is
  ;; added with depth 95, so this one gets called only when the file isn't
  ;; recognizable by `objdump-disassemble'
  (add-hook 'magic-fallback-mode-alist '(+hexl-buffer-p . hexl-mode) 96)
  :config
  ;; A predicate for detecting binary files. Inspired by: https://emacs.stackexchange.com/q/10277/37002
  (defun +hexl-binary-buffer-p (&optional buffer)
    "Check if BUFFER contains binary data.
A binary buffer is defined as containing at least one null byte.
Returns either nil, or the position of the first null byte."
    (with-current-buffer (or buffer (current-buffer))
      (save-excursion (goto-char (point-min)) (search-forward (string ?\x00) nil :noerror))))

  (defun +hexl-buffer-p (&optional buffer)
    "Does BUFFER (defaults to the current buffer) should be viewed using `hexl-mode'."
    (and +hexl-auto-enable (not (eq major-mode 'hexl-mode)) (+hexl-binary-buffer-p buffer))))

(use-package eww
  :custom
  (eww-auto-rename-buffer 'title))


(provide 'me-builtin)

;;; me-builtin.el ends here
