;;; me-loaddefs.el --- automatically extracted autoloads (do not edit)   -*- lexical-binding: t -*-
;; Generated by the `loaddefs-generate' function.

;; This file is part of GNU Emacs.

;;; Code:



;;; Generated autoloads from ../modules/extras/me-adb.el

(defvar +adb-program "adb")
(defvar +adb-available-p nil)
(defun +adb-available-p (&rest _args) (with-memoization +adb-available-p (and (executable-find +adb-program) t)))
(dolist (cmd '(+adb-push +adb-remount +adb-reboot +adb-root)) (put cmd 'completion-predicate #'+adb-available-p))
(autoload '+adb-push "../modules/extras/me-adb" "\
Run adb push SRC DEST.

(fn SRC DEST)" t)
(autoload '+adb-remount "../modules/extras/me-adb" "\
Run adb remount, with -R when AUTO-REBOOT-DEVICE is non-nil.

(fn AUTO-REBOOT-DEVICE)" t)
(autoload '+adb-reboot "../modules/extras/me-adb" "\
Run adb reboot MODE, when NO-CONFIRM is non-nil, don't ask.

(fn &optional MODE NO-CONFIRM)" t)
(autoload '+adb-root "../modules/extras/me-adb" "\
Run adb root (or unroot with \\[universal-argument]).

(fn &optional ARG)" t)
(register-definition-prefixes "../modules/extras/me-adb" '("+adb-"))


;;; Generated autoloads from ../modules/on-demand/me-agda.el

(minemacs-register-on-demand-module 'me-agda :auto-mode '(("\\.l?agda\\'" . agda2-mode)))


;;; Generated autoloads from ../modules/on-demand/me-alloy.el

(minemacs-register-on-demand-module 'me-alloy :auto-mode '(("\\.als\\'" . alloy-mode)))


;;; Generated autoloads from ../modules/on-demand/me-apl.el

(minemacs-register-on-demand-module 'me-apl :auto-mode '(("\\.apl\\'" . gnu-apl-mode)) :interpreter-mode '(("apl" . gnu-apl-mode)))


;;; Generated autoloads from ../modules/on-demand/me-arduino.el

(minemacs-register-on-demand-module 'me-arduino :auto-mode '((("\\.ino\\'" "\\.pde\\'") . arduino-mode)))


;;; Generated autoloads from ../modules/on-demand/me-assembly.el

(minemacs-register-on-demand-module 'me-assembly :auto-mode '(("\\.S\\'" . gas-mode) (("\\.asm\\'" "\\.inc\\'") . masm-mode) ("\\.mips\\'" . mips-mode) ("\\.riscv\\'" . riscv-mode)) :companion-packages '((asm-mode . x86-lookup)))
(autoload '+asm-ask-for-mode "../modules/on-demand/me-assembly" "\
Ask the MODE to run.

(fn MODE)" t)


;;; Generated autoloads from ../modules/on-demand/me-awk.el

(minemacs-register-on-demand-module 'me-awk :auto-mode '(("\\.awk\\'" . awk-ts-mode)) :companion-packages '((awk-mode . awk-ts-mode)))


;;; Generated autoloads from ../modules/on-demand/me-ballerina.el

(minemacs-register-on-demand-module 'me-ballerina :auto-mode '(("\\.bal\\'" . ballerina-mode)))


;;; Generated autoloads from ../modules/on-demand/me-bazel.el

(minemacs-register-on-demand-module 'me-bazel :auto-mode '(("/\\(?:\\(?:bazel\\)?\\.bazelrc\\)\\'" . bazelrc-mode) ("/Android\\.bp\\'" . bazel-build-mode) ("/\\(?:BUILD\\(?:\\.bazel\\)?\\)\\'" . bazel-build-mode) ("/MODULE\\.bazel\\'" . bazel-module-mode) ("/.+\\.bzl\\'" . bazel-starlark-mode) ("/\\.bazelignore\\'" . bazelignore-mode) ("/\\.bazeliskrc\\'" . bazeliskrc-mode) ("/\\(?:WORKSPACE\\(?:\\.b\\(?:azel\\|zlmod\\)\\)?\\)\\'" . bazel-workspace-mode)))


;;; Generated autoloads from ../modules/extras/me-bitbake.el

(autoload '+bitbake-poky-sources "../modules/extras/me-bitbake" "\
Get all source directories for BUILD-DIR. Optionally INCLUDE-NATIVE.

(fn BUILD-DIR &optional INCLUDE-NATIVE)")
(autoload '+bitbake-insert-poky-sources "../modules/extras/me-bitbake" "\
Insert poky source directories for BUILD-DIR.

(fn BUILD-DIR)" t)


;;; Generated autoloads from me-bootstrap.el

(register-definition-prefixes "me-bootstrap" '("+minemacs--" "+straight-" "+use-package--check-if-disabled:around-a" "minemacs-"))


;;; Generated autoloads from ../modules/on-demand/me-bqn.el

(minemacs-register-on-demand-module 'me-bqn :auto-mode '(("\\.bqn\\'" . bqn-mode)) :interpreter-mode '(("bqn" . bqn-mode)))


;;; Generated autoloads from ../modules/on-demand/me-c3.el

(minemacs-register-on-demand-module 'me-c3 :auto-mode '(("\\.c3[it]?\\'" . c3-ts-mode)))


;;; Generated autoloads from ../modules/on-demand/me-cc.el

(minemacs-register-on-demand-module 'me-cc :companion-packages '(((c-mode c++-mode c-ts-mode c++-ts-mode) . flymake-cppcheck)))


;;; Generated autoloads from ../modules/on-demand/me-chapel.el

(minemacs-register-on-demand-module 'me-chapel :auto-mode '(("\\.chpl\\'" . chapel-mode)))


;;; Generated autoloads from ../modules/on-demand/me-clojure.el

(minemacs-register-on-demand-module 'me-clojure :auto-mode '(("\\.cljs\\'" . clojurescript-mode) (("\\.cljc\\'" "\\.\\(clj\\|cljd\\|dtm\\|edn\\|lpy\\)\\'" "\\(?:build\\|profile\\)\\.boot\\'") . clojure-mode)) :interpreter-mode '(("bb" . clojure-mode) ("nbb" . clojurescript-mode)))


;;; Generated autoloads from ../modules/on-demand/me-cmake.el

(minemacs-register-on-demand-module 'me-cmake :auto-mode '((("CMakeLists\\.txt\\'" "\\.cmake\\'") . cmake-mode)) :companion-packages '((cmake-ts-mode cmake-font-lock cmake-mode)))


;;; Generated autoloads from ../modules/on-demand/me-cobol.el

(minemacs-register-on-demand-module 'me-cobol :auto-mode '(("\\.c\\(ob\\|bl\\|py\\)\\'" . cobol-mode)))


;;; Generated autoloads from ../modules/extras/me-cocogitto.el

(defvar +cocogitto-program "cog")
(defvar +cocogitto-available-p nil)
(defun +cocogitto-available-p (&rest _args) (with-memoization +cocogitto-available-p (and (executable-find +cocogitto-program) t)))
(autoload '+cocogitto-bump "../modules/extras/me-cocogitto" "\
Bump version LEVEL (`auto', `major', `minor' or `patch').

When PRE is provided, it is used as pre-release suffix.

Call with \\[universal-argument] for applying an `auto' bump.

This command stashes the current workspace before bumping the version, and
restores it after that.

(fn LEVEL &optional PRE)" t)
(put '+cocogitto-bump 'completion-predicate (lambda (_cmd _buf) (+cocogitto-available-p)))
(register-definition-prefixes "../modules/extras/me-cocogitto" '("+cocogitto-buffer-name"))


;;; Generated autoloads from ../modules/on-demand/me-coffee.el

(minemacs-register-on-demand-module 'me-coffee :auto-mode '((("\\.coffee\\'" "\\.iced\\'" "Cakefile\\'" "\\.cson\\'") . coffee-mode)) :interpreter-mode '(("coffee" . coffee-mode)))


;;; Generated autoloads from ../modules/on-demand/me-common-lisp.el

(minemacs-register-on-demand-module 'me-common-lisp :companion-packages '((lisp-mode sly sly-macrostep sly-quicklisp sly-asdf sly-macrostep)))


;;; Generated autoloads from ../modules/on-demand/me-cron.el

(minemacs-register-on-demand-module 'me-cron :auto-mode '(("\\.?cron\\(tab\\)?\\(\\.X*[[:alnum:]]+\\)?\\'" . crontab-mode)))


;;; Generated autoloads from ../modules/on-demand/me-crystal.el

(minemacs-register-on-demand-module 'me-crystal :auto-mode '(("\\(?:\\.cr\\)\\'" . crystal-mode)) :interpreter-mode '(("crystal" . crystal-mode)))


;;; Generated autoloads from ../modules/on-demand/me-csv.el

(minemacs-register-on-demand-module 'me-csv :auto-mode '(("\\.[Cc][Ss][Vv]\\'" . csv-mode) ("\\.[Tt][Ss][Vv]\\'" . tsv-mode)) :companion-packages '((csv-mode rainbow-csv eplot)))


;;; Generated autoloads from ../modules/on-demand/me-cuda.el

(minemacs-register-on-demand-module 'me-cuda :auto-mode '(("\\.cu[h]?\\'" . cuda-ts-mode)))


;;; Generated autoloads from ../modules/on-demand/me-cue.el

(minemacs-register-on-demand-module 'me-cue :auto-mode '(("\\.cue\\'" . cue-mode)))


;;; Generated autoloads from ../modules/on-demand/me-cypher.el

(minemacs-register-on-demand-module 'me-cypher :auto-mode '(("\\.cyp\\(?:her\\)?\\'" . cypher-mode)))


;;; Generated autoloads from ../modules/on-demand/me-cython.el

(minemacs-register-on-demand-module 'me-cython :auto-mode '((("\\.pyx\\'" "\\.px[di]\\'") . cython-mode)))


;;; Generated autoloads from ../modules/on-demand/me-d.el

(minemacs-register-on-demand-module 'me-d :auto-mode '(("\\.d[i]?\\'" . d-mode)))


;;; Generated autoloads from ../modules/on-demand/me-d2.el

(minemacs-register-on-demand-module 'me-d2 :auto-mode '(("\\.d2\\'" . d2-mode)))


;;; Generated autoloads from ../modules/on-demand/me-dart.el

(minemacs-register-on-demand-module 'me-dart :auto-mode '(("\\.dart\\'" . dart-mode)) :companion-packages '((dart-mode . flutter)))


;;; Generated autoloads from ../modules/on-demand/me-devicetree.el

(minemacs-register-on-demand-module 'me-devicetree :auto-mode '(("\\.dtsi?\\'" . dts-mode) (".+\\.dtb\\|dtbo\\'" . virtual-dts-mode)))


;;; Generated autoloads from ../modules/on-demand/me-dhall.el

(minemacs-register-on-demand-module 'me-dhall :auto-mode '(("\\.dhall\\'" . dhall-mode)))


;;; Generated autoloads from ../modules/on-demand/me-djvu.el

(minemacs-register-on-demand-module 'me-djvu :auto-mode '(("\\.[dD][jJ][vV][uU]?\\'" . djvu-init-mode)) :magic-mode '(("%DJVU" . djvu-read-mode)))


;;; Generated autoloads from ../modules/on-demand/me-docker.el

(minemacs-register-on-demand-module 'me-docker :auto-mode `((("\\.dockerfile\\'" "[/\\]\\(?:Containerfile\\|Dockerfile\\)\\(?:\\.[^/\\]*\\)?\\'") . dockerfile-mode) ("docker-compose[^/]*\\.ya?ml\\'" . docker-compose-mode) ("/Apptainer\\(?:[/]*\\)?\\'" . apptainer-mode)))


;;; Generated autoloads from ../modules/on-demand/me-dotnet.el

(minemacs-register-on-demand-module 'me-dotnet :auto-mode '(("\\.\\(frm\\|bas\\|cls\\|vb\\)\\'" . vbnet-mode) ("\\.\\(vb\\|cs\\|fs\\|vcx\\|vd\\)proj\\'" . csproj-mode) ("\\.sln\\'" . sln-mode)) :companion-packages '(((csharp-mode csharp-ts-mode) dotnet csproj-mode sharper)))
(register-definition-prefixes "../modules/on-demand/me-dotnet" '("+dotnet-get-templates"))


;;; Generated autoloads from ../modules/on-demand/me-ebuild.el

(minemacs-register-on-demand-module 'me-ebuild :auto-mode '(("\\.ebuild\\'" . ebuild-mode) ("\\.eclass\\'" . ebuild-eclass-mode)))


;;; Generated autoloads from extras/me-eglot-x.el

(with-eval-after-load 'eglot (require 'me-eglot-x))
(autoload 'eglot-ltex-ls-install "extras/me-eglot-x" "\
Download the latest release of LTeX+ LS.

When PRE is non-nil, allow downloading the latest prerelease.

(fn PRE)" t)
(put 'eglot-ltex-language 'safe-local-variable 'stringp)
(autoload 'eglot-ltex-enable-handling-client-commands "extras/me-eglot-x" "\
Enable Eglot hack to handle code actions of LTeX-LS." t)
(with-eval-after-load 'eglot (eglot-ltex-enable-handling-client-commands))
(register-definition-prefixes "extras/me-eglot-x" '("eglot-ltex-"))


;;; Generated autoloads from ../modules/on-demand/me-elixir.el

(minemacs-register-on-demand-module 'me-elixir :auto-mode '((("\\.elixir\\'" "\\.exs?\\'" "/mix\\.lock") . elixir-mode)) :companion-packages '((elixir-mode . ob-elixir)))


;;; Generated autoloads from ../modules/on-demand/me-elm.el

(minemacs-register-on-demand-module 'me-elm :auto-mode '(("\\.elm\\'" . elm-mode)) :companion-packages '((elm-mode . elm-test-runner)))


;;; Generated autoloads from ../modules/on-demand/me-epub.el

(minemacs-register-on-demand-module 'me-epub :auto-mode '(("\\.[eE][pP][uU][bB]\\'" . nov-mode)))


;;; Generated autoloads from ../modules/on-demand/me-erlang.el

(minemacs-register-on-demand-module 'me-erlang :auto-mode '((("\\.erl$" "\\.app\\.src$" "\\.escript" "\\.hrl$" "\\.xrl$" "\\.yrl" "/ebin/.+\\.app") . erlang-mode)))
(register-definition-prefixes "../modules/on-demand/me-erlang" '("+erlang-path"))


;;; Generated autoloads from me-external-tools.el

(register-definition-prefixes "me-external-tools" '("minemacs-external-dependencies"))


;;; Generated autoloads from ../modules/on-demand/me-fish.el

(minemacs-register-on-demand-module 'me-fish :auto-mode '((("\\.fish\\'" "/fish_funced\\..*\\'") . fish-mode)) :interpreter-mode '(("fish" . fish-mode)))


;;; Generated autoloads from ../modules/on-demand/me-forth.el

(minemacs-register-on-demand-module 'me-forth :auto-mode '(("\\.\\(fth\\|4th\\)\\'" . forth-mode)))


;;; Generated autoloads from ../modules/on-demand/me-fpga.el

(minemacs-register-on-demand-module 'me-fpga :auto-mode '(("\\.vhdl?\\'" . vhdl-ts-mode) ("\\.[ds]?va?h?\\'" . verilog-ts-mode)) :companion-packages '((vhdl-mode . vhdl-ts-mode) (verilog-mode . verilog-ts-mode)))


;;; Generated autoloads from ../modules/on-demand/me-franca-idl.el

(minemacs-register-on-demand-module 'me-franca-idl :auto-mode '(("\\.fidl\\'" . franca-idl-mode)))


;;; Generated autoloads from ../modules/on-demand/me-freebasic.el

(minemacs-register-on-demand-module 'me-freebasic :auto-mode '(("\\.b\\(i\\|as\\)\\'" . fb-mode)))


;;; Generated autoloads from ../modules/on-demand/me-fsharp.el

(minemacs-register-on-demand-module 'me-fsharp :auto-mode '(("\\.fs[iylx]?\\'" . fsharp-mode) ("\\.fsproj\\'" . nxml-mode)))


;;; Generated autoloads from ../modules/on-demand/me-gecode.el

(minemacs-register-on-demand-module 'me-gecode :auto-mode '((("\\.gco\\(?:de\\)?\\'" "\\.GCO\\(?:DE\\)?\\'" "\\.[nN][gG]?[cC]\\'" "\\.mp[tf]\\'") . gcode-mode)))


;;; Generated autoloads from ../modules/on-demand/me-genexpr.el

(minemacs-register-on-demand-module 'me-genexpr :auto-mode '(("\\.genexpr\\'" . genexpr-mode)))


;;; Generated autoloads from ../modules/extras/me-git.el

(defvar +git-commit-prefix-in-project nil "\
Propose to insert a commit prefix in the current project.

Set this variable in your project's \".dir-locals.el\". You can set it
to `conventional' or `prefix'.")
(custom-autoload '+git-commit-prefix-in-project "../modules/extras/me-git" t)
(make-variable-buffer-local '+git-commit-prefix-in-project)
(autoload '+git-insert-commit-prefix "../modules/extras/me-git" "\
Prompt for conventional commit type with scope completion.
When CLEAN-CACHE is non-nil, regenerate the cache, otherwise, the cache
will be generated each `+git-types-cache-age'.

(fn &optional CLEAN-CACHE)" t)
(register-definition-prefixes "../modules/extras/me-git" '("+git-"))


;;; Generated autoloads from ../modules/on-demand/me-gitlab.el

(minemacs-register-on-demand-module 'me-gitlab :auto-mode '(("\\.gitlab-ci.ya?ml\\'" . gitlab-ci-mode)) :companion-packages '(((yaml-mode yaml-ts-mode) . gitlab-ci-mode)) :define-loader t)


;;; Generated autoloads from ../modules/on-demand/me-gnuplot.el

(minemacs-register-on-demand-module 'me-gnuplot :auto-mode '((("\\.plot\\'" "\\.gpi\\'" "\\.gplt\\'" "\\.plt\\'" "\\.gnuplot\\'") . gnuplot-mode)))


;;; Generated autoloads from ../modules/on-demand/me-godot.el

(minemacs-register-on-demand-module 'me-godot :auto-mode '(("\\.gd\\'" . gdscript-mode) ("\\.tres\\'" . conf-toml-mode) ("\\.tscn\\'" . conf-toml-mode)))


;;; Generated autoloads from ../modules/on-demand/me-graphql.el

(minemacs-register-on-demand-module 'me-graphql :auto-mode '((("\\.gql\\'" "\\.graphql\\'") . graphql-mode)))


;;; Generated autoloads from ../modules/on-demand/me-graphviz.el

(minemacs-register-on-demand-module 'me-graphviz :auto-mode '(("\\.gv\\'" . graphviz-dot-mode) ("\\.dot\\'" . graphviz-dot-mode)))


;;; Generated autoloads from ../modules/on-demand/me-hare.el

(minemacs-register-on-demand-module 'me-hare :auto-mode '(("\\.ha\\'" . hare-ts-mode)))


;;; Generated autoloads from ../modules/on-demand/me-haskell.el

(minemacs-register-on-demand-module 'me-haskell :auto-mode '((("\\.hsig\\'" "\\.[gh]s\\'" "\\.hsc\\'") . haskell-mode) ("\\.l[gh]s\\'" . haskell-literate-mode)) :interpreter-mode '(("runghc" . haskell-mode) ("runhaskell" . haskell-mode)))


;;; Generated autoloads from ../modules/on-demand/me-haxe.el

(minemacs-register-on-demand-module 'me-haxe :auto-mode '(("\\.hx\\'" . haxe-mode)))


;;; Generated autoloads from ../modules/on-demand/me-hcl.el

(minemacs-register-on-demand-module 'me-hcl :auto-mode '(("\\.hcl\\'" . hcl-mode) ("\\.nomad\\'" . hcl-mode) ("\\.t\\(f\\(vars\\)?\\|ofu\\)\\'" . terraform-mode)))


;;; Generated autoloads from ../modules/on-demand/me-hurl.el

(minemacs-register-on-demand-module 'me-hurl :auto-mode '(("\\.hurl\\'" . hurl-mode)))


;;; Generated autoloads from ../modules/on-demand/me-hy.el

(minemacs-register-on-demand-module 'me-hy :auto-mode '(("\\.hy\\'" . hy-mode)) :interpreter-mode '(("hy" . hy-mode)) :companion-packages '((hy-mode . ob-hy)))


;;; Generated autoloads from ../modules/on-demand/me-idris.el

(minemacs-register-on-demand-module 'me-idris :auto-mode '(("\\.l?idr\\'" . idris-mode)))


;;; Generated autoloads from ../modules/on-demand/me-java.el

(minemacs-register-on-demand-module 'me-java :auto-mode '((("\\.g\\(?:ant\\|roovy\\|radle\\)\\'" "/Jenkinsfile\\'") . groovy-mode)) :interpreter-mode '(("groovy" . groovy-mode)) :companion-packages '(((java-mode java-ts-mode) groovy-mode android-mode)))


;;; Generated autoloads from ../modules/on-demand/me-javascript.el

(minemacs-register-on-demand-module 'me-javascript :companion-packages '(((js-mode js-ts-mode typescript-mode typescript-ts-mode) . add-node-modules-path)))


;;; Generated autoloads from ../modules/on-demand/me-jenkins.el

(minemacs-register-on-demand-module 'me-jenkins :auto-mode '(("Jenkinsfile\\'" . jenkinsfile-mode)))


;;; Generated autoloads from ../modules/on-demand/me-jira.el

(minemacs-register-on-demand-module 'me-jira :auto-mode '(("\\.confluence$" . jira-markup-mode) ("jira.*\\.txt$" . jira-markup-mode)))


;;; Generated autoloads from ../modules/on-demand/me-json.el

(minemacs-register-on-demand-module 'me-json :auto-mode '((("\\.js\\(?:on\\|[hl]int\\(?:rc\\)?\\)\\'" "/.babelrc\\'" "/.bowerrc\\'" "/composer.lock\\'") . json-mode)) :companion-packages '((json-ts-mode jq-mode json-mode) ((nxml-mode yaml-mode yaml-ts-mode) . jq-mode)))


;;; Generated autoloads from ../modules/on-demand/me-julia.el

(minemacs-register-on-demand-module 'me-julia :auto-mode '(("\\.jl\\'" . julia-mode)) :interpreter-mode '(("julia" . julia-mode)) :companion-packages '(((julia-mode julia-ts-mode ess-julia-mode) julia-repl julia-snail julia-ts-mode)))


;;; Generated autoloads from ../modules/on-demand/me-jupyter.el

(minemacs-register-on-demand-module 'me-jupyter :auto-mode '(("\\.ipynb\\'" . ein:ipynb-mode)) :define-loader t)


;;; Generated autoloads from ../modules/on-demand/me-just.el

(minemacs-register-on-demand-module 'me-just :auto-mode '((("/[Jj]ustfile\\'" "\\.[Jj]ust\\(file\\)?\\'") . just-mode)) :companion-packages '(((just-mode just-ts-mode) . justl)))


;;; Generated autoloads from ../modules/on-demand/me-kotlin.el

(minemacs-register-on-demand-module 'me-kotlin :auto-mode '(("\\.kts?\\'" kotlin-mode kotlin-ts-mode)))


;;; Generated autoloads from ../modules/on-demand/me-latex.el

(minemacs-register-on-demand-module 'me-latex :companion-packages '(((latex-mode tex-mode doctex-mode bibtex-mode bibtex-style-mode) auctex auctex-latexmk latex-preview-pane xenops)))


;;; Generated autoloads from me-lib.el

(defvar +sudo-indicator-mode nil "\
Non-nil if +Sudo-Indicator mode is enabled.
See the `+sudo-indicator-mode' command
for a description of this minor mode.
Setting this variable directly does not take effect;
either customize it (see the info node `Easy Customization')
or call the function `+sudo-indicator-mode'.")
(custom-autoload '+sudo-indicator-mode "me-lib" nil)
(autoload '+sudo-indicator-mode "me-lib" "\
Indicates editing as root by displaying a message in the header line.

This is a global minor mode.  If called interactively, toggle the
`+Sudo-Indicator mode' mode.  If the prefix argument is positive, enable
the mode, and if it is zero or negative, disable the mode.

If called from Lisp, toggle the mode if ARG is `toggle'.  Enable the
mode if ARG is nil, omitted, or is a positive number.  Disable the mode
if ARG is a negative number.

To check whether the minor mode is enabled in the current buffer,
evaluate `(default-value \\='+sudo-indicator-mode)'.

The mode's hook is called both when the mode is enabled and when it is
disabled.

(fn &optional ARG)" t)
(register-definition-prefixes "me-lib" '("+a" "+color-subtle" "+d" "+e" "+f" "+i" "+known-scripts" "+l" "+make-" "+nerd-icons-icon" "+p" "+r" "+s" "+tweak-faces" "+un" "+varplist-get" "+with-" "minemacs-"))


;;; Generated autoloads from me-lib-x.el

(autoload 'minemacs-run-build-functions "me-lib-x" "\
Run all build functions in `minemacs-build-functions'.

Call functions without asking when DONT-ASK-P is non-nil.

(fn &optional DONT-ASK-P)" t)
(autoload 'minemacs-root-dir-cleanup "me-lib-x" "\
Cleanup MinEmacs' root directory.")
(autoload 'minemacs-cleanup-emacs-directory "me-lib-x" "\
Cleanup unwanted files/directories from MinEmacs' directory." t)
(autoload 'minemacs-user-config "me-lib-x" "\
Open MinEmacs user configuration.

When ASK is non-nil (\\[universal-argument]), ask about which file to open.

(fn ASK)" t)
(autoload '+clean-file-name "me-lib-x" "\
Clean FILENAME, optionally convert to DOWNCASE-P.

(fn FILENAME &optional DOWNCASE-P)")
(autoload '+file-name-incremental "me-lib-x" "\
Return a unique file name for FILENAME.
If \"file.ext\" exists, returns \"file-0.ext\".

(fn FILENAME)")
(autoload '+delete-this-file "me-lib-x" "\
Delete PATH.

If PATH is not specified, default to the current buffer's file.

If FORCE-P, delete without confirmation.

(fn &optional PATH FORCE-P)" t)
(autoload '+delete-file-or-directory "me-lib-x" "\
Delete FILE-OR-DIRECTORY with `delete-file' or `delete-directory'.

Move to trash when TRASH is non-nil, delete directories recursively when
RECURSIVE is non-nil.

(fn FILE-OR-DIRECTORY &optional TRASH RECURSIVE)")
(autoload '+delete-current-file-and-buffer "me-lib-x" "\
Delete FILENAME and its associated visiting buffer.

(fn &optional FILENAME)" t)
(autoload '+copy-current-file-name "me-lib-x" "\
Save (copy) the file name of this buffer to the kill ring." t)
(autoload '+apply-patch-dwim "me-lib-x" "\
Apply PATCH-BUF to the relevant file in PROJ-DIR.
When a region is active, propose to use it as the patch buffer.

(fn PATCH-BUF &optional PROJ-DIR)" t)
(autoload '+diff-last-two-kills "me-lib-x" "\
Diff last couple of things in the kill-ring. With prefix open `ediff'.

(fn &optional EDIFF-P)" t)
(autoload '+html2pdf "me-lib-x" "\
Convert HTML file INFILE to PDF and save it to OUTFILE.
When BACKEND is provided, the corresponding program is used, otherwise, the
value of `+html2pdf-default-backend' is used.

(fn INFILE OUTFILE &optional BACKEND)")
(autoload '+txt2html "me-lib-x" "\
Convert plain-text file INFILE to HTML and save it to OUTFILE.
When MAIL-MODE-P is non-nil, --mailmode is passed to \"txt2html\".

(fn INFILE OUTFILE &optional MAIL-MODE-P)")
(autoload '+save-as-pdf "me-lib-x" "\
Save URL as PDF.
This function's signature is compatible with `browse-url-browser-function'
so it can be used to save HTML pages or emails to PDF.
When MAIL-MODE-P is non-nil, treat INFILE as a mail.

(fn INFILE &optional MAIL-MODE-P)")
(autoload '+save-url-to-html-file "me-lib-x" "\
Save URL into OUT-FILE as a standalone HTML file.

(fn URL OUT-FILE)" t)
(autoload '+browse-html-file "me-lib-x" "\
Browser HTML FILE following `+browse-html-file-browser-priority'.

If no function from `+browse-html-file-browser-priority' is available,
use `browse-url'.

When called with universal argument, open the current buffer's file.

(fn FILE)" t)
(autoload '+serial-running-p "me-lib-x" "\
Is there a serial port terminal running?")
(autoload '+serial-run-commands "me-lib-x" "\
Run COMMANDS on a device via serial communication.

If PORT or BAUD are nil, use values from `+serial-port' and `+serial-baudrate'.

(fn COMMANDS &optional PORT BAUD)" t)
(autoload '+net-get-ip-address "me-lib-x" "\
Get the IP-address for device DEV of the current machine.

(fn &optional DEV)")
(autoload '+github-latest-release "me-lib-x" "\
Get the latest release of REPO. Strips the \"v\" at left.
Fallback to FALLBACK-RELEASE when it can't get the last one.
When TRIM-V-PREFIX is non-nil, trim the \"v\" prefix from the version.

(fn REPO &optional FALLBACK-RELEASE TRIM-V-PREFIX)")
(autoload '+github-download-release "me-lib-x" "\
Download release from REPO.

If FILENAME-REGEXP is a string, use it as a regexp to match against the
file name.

When OK-IF-ALREADY-EXISTS is non-nil, the file gets overwritten if it
already exists.

Keyword argument :VER can be used to pass the version to download, when
no version is passed, the latest release is downloaded. The :OUT-FILE
can be used to choose the output file path, otherwise, the file will be
downloaded with the original file name to `+github-download-dir'. If a
non-nil value is provided for :PRERELEASE, we download the latest
prerelease if no :VER is provided.

(fn REPO FILENAME-REGEXP &optional OK-IF-ALREADY-EXISTS &key VER OUT-FILE PRERELEASE)")
(autoload '+dir-locals-reload-for-this-buffer "me-lib-x" "\
Reload directory-local for the current buffer." t)
(autoload '+dir-locals-reload-for-all-buffers-in-this-directory "me-lib-x" "\
Reload dir-locals for all buffers under `default-directory'." t)
(defvar +dir-locals-autoreload-mode nil "\
Non-nil if +Dir-Locals-Autoreload mode is enabled.
See the `+dir-locals-autoreload-mode' command
for a description of this minor mode.
Setting this variable directly does not take effect;
either customize it (see the info node `Easy Customization')
or call the function `+dir-locals-autoreload-mode'.")
(custom-autoload '+dir-locals-autoreload-mode "me-lib-x" nil)
(autoload '+dir-locals-autoreload-mode "me-lib-x" "\
Autoload buffers affected by editing the current `dir-locals-file'.

This is a global minor mode.  If called interactively, toggle the
`+Dir-Locals-Autoreload mode' mode.  If the prefix argument is positive,
enable the mode, and if it is zero or negative, disable the mode.

If called from Lisp, toggle the mode if ARG is `toggle'.  Enable the
mode if ARG is nil, omitted, or is a positive number.  Disable the mode
if ARG is a negative number.

To check whether the minor mode is enabled in the current buffer,
evaluate `(default-value \\='+dir-locals-autoreload-mode)'.

The mode's hook is called both when the mode is enabled and when it is
disabled.

(fn &optional ARG)" t)
(autoload '+ansi-color-apply-on-buffer "me-lib-x" "\
Decode and apply ANSI color chars in the curernt buffer." t)
(autoload '+completion-mark-category "me-lib-x" "\
Mark SEQ as being in CATEGORY for use with `completing-read'.

(fn SEQ CATEGORY)")
(autoload '+region-or-thing-at-point "me-lib-x" "\
Return the region or the thing at point.

If LEAVE-REGION-MARKED is no-nil, don't call `desactivate-mark'
when a region is selected.

(fn &optional LEAVE-REGION-MARKED)")
(autoload '+insert-thing-at-point "me-lib-x" "\
Insert region or symbol in the minibuffer." t)
(autoload '+kill-region-or-backward-word "me-lib-x" "\
Kill selected region if region is active. Otherwise kill a backward word." t)
(autoload '+kill-whitespace-or-word "me-lib-x" "\
Kill forward whitespace or word.
With argument ARG, do this that many times.
Restricts the effect of `kill-word' to the current line.

(fn ARG)" t)
(autoload '+backward-kill-whitespace-or-word "me-lib-x" "\
Kill backward whitespace or word.
With argument ARG, do this that many times.
Restricts the effect of `backward-kill-word' to the current line.

(fn ARG)" t)
(autoload '+set-indent-width "me-lib-x" "\
Change the indentation size to WIDTH of the current buffer.

The effectiveness of this command is significantly improved if
you have `editorconfig' or `dtrt-indent' installed.

(fn WIDTH)" t)
(autoload '+autoload-region "me-lib-x" "\
Add the ;;;###autoload to region (BEG . END).

(fn BEG END)" t)
(autoload '+webjump "me-lib-x" "\
Like `webjump', with initial query filled from `+region-or-thing-at-point'." t)
(autoload '+bookmark-set-at-mouse "me-lib-x" "\


(fn EVENT)" t)
(autoload '+eglot-ccls-inheritance-hierarchy "me-lib-x" "\
Show inheritance hierarchy for the thing at point.
If DERIVED is non-nil (interactively, with prefix argument), show
the children of class at point.

(fn &optional DERIVED)" t)
(autoload '+eglot-help-at-point "me-lib-x" "\
Request documentation for the thing at point." t)
(autoload '+shellcheck-describe-error "me-lib-x" "\
Describe a ShellCheck message CODES.

(fn &rest CODES)" t)
(autoload '+explainshell "me-lib-x" "\
Get an explanation of the shell COMMAND from explainshell.com.

(fn COMMAND)" t)
(autoload '+insert-schema "me-lib-x" "\
Insert a schema for the current buffer's file (YAML or TOML).
When ASK is non-nil, ask which schema to insert without trying to guess
the schema from the file name.

(fn &optional ASK)" t)
(autoload '+clang-format-config-file "me-lib-x" "\


(fn &optional DIR)")
(autoload '+clang-format-get-lang "me-lib-x")
(autoload '+clang-format-get-style "me-lib-x" "\
Get the \"-style=XXX\" argument for clang-format.

When NO-OPT isn non-nil, don't return the \"-style=\" part.

(fn &optional NO-OPT)")
(autoload '+editorconfig-guess-style-from-clang-format "me-lib-x" "\
Set some editor settings from \".clang-format\" when available." t)
(autoload '+compilation-db-find-file "me-lib-x" "\


(fn &optional PROJ-ROOT)")
(autoload '+get-compilation-db "me-lib-x" "\
Get the  \"compile_commands.json\" for project at PROJ-ROOT as a plist.

(fn &optional PROJ-ROOT)")
(autoload '+compilation-db-get-entry "me-lib-x" "\


(fn FILE-NAME &optional PROJ-ROOT)")
(autoload '+cmd-split-rm-single "me-lib-x" "\
Remove a single FLAG from CMD.  Test according to TEST.

(fn CMD FLAG &optional TEST)")
(autoload '+cmd-split-rm-double "me-lib-x" "\
Remove a FLAG and subsequent arg from CMD.

(fn CMD FLAG)")
(autoload '+guess-args-from-compilation-db "me-lib-x" "\


(fn FILE-NAME)")
(autoload '+hide-ifdef-get-env-from-compilation-db "me-lib-x" "\
Integrate `hideif' with \"compile_commands.json\".")
(autoload '+kill-buffer-after-sentinel-exit "me-lib-x" "\


(fn ORIG-FN PROC MSG)")
(autoload '+server-restart "me-lib-x" "\
Restart the Emacs server." t)
(autoload '+region-to-buffer "me-lib-x" "\
Copy region to BUFFER: At beginning (prefix >= 0), end (< 0), or replace.
START and END are the region boundaries.
BUFFER is a buffer or its name (a string).
With prefix ARG >= 0: `append-to-buffer':
  Append contents of region to end of BUFFER.
  (Point is moved to end of BUFFER first.)
With prefix ARG < 0:  `prepend-to-buffer':
  Prepend contents of region to beginning of BUFFER.
  (Point is moved to beginning of BUFFER first.)
With no prefix ARG (nil): `copy-to-buffer'.
  Write region to BUFFER, replacing any previous contents.

(fn START END BUFFER ARG)" t)
(autoload '+region-to-file "me-lib-x" "\
With prefix arg, this is `append-to-file'.  Without, it is `write-region'.
START and END are the region boundaries.
Prefix ARG non-nil means append region to end of file FILENAME.
Prefix ARG nil means write region to FILENAME, replacing contents.

(fn START END FILENAME ARG)" t)
(autoload '+clear-frenchy-ponctuations "me-lib-x" "\
Replace french ponctuations (like unsectable space) by regular ones." t)
(autoload '+save-buffer-preserving-modtime "me-lib-x" "\
Call `save-buffer', but keep the visited file's modtime the same." t)
(autoload '+copy-region-as-paragraph "me-lib-x" "\
Copy region as one paragraph.
This command removes new line characters between lines." t)
(autoload '+first-line-empty-p "me-lib-x" "\
Return t when the first line of the buffer is empty.")
(autoload '+project-forget-zombie-projects "me-lib-x" "\
Forget all known projects that don't exist any more.

Like `project-forget-zombie-projects', but handles remote projects differently,
it forget them only when we are sure they don't exist." t)
(autoload '+project-gdb "me-lib-x" "\
Invoke `gdb' in the project's root." t)
(autoload '+project-list-cleanup "me-lib-x" "\
Forget all duplicate known projects (like /home/user/proj and ~/proj)." t)
(defvar +project-root-wildcards '("~/Projects/*/*"))
(autoload '+project-root-initialize "me-lib-x" "\
Initialize project list from `+project-root-wildcards'." t)
(autoload '+xref-find-references-at-point "me-lib-x" "\
Find references to the identifier at or around point." t)
(autoload 'minemacs-extract-packages-descriptions "me-lib-x" "\
Extract the descriptions of MinEmacs packages." t)
(autoload '+list-external-dependencies "me-lib-x" "\
Show the list of declared external dependencies." t)
(autoload '+describe-at-point "me-lib-x" "\
Show help for the symbol at point." t)
(register-definition-prefixes "me-lib-x" '("+apply-patch-dwim-" "+browse-html-file-browser-priority" "+c" "+dir-locals-" "+eglot--help-buffer" "+fetch-json-from-url" "+g" "+html2pdf-" "+json-schemas-" "+monolith-program" "+net-default-device" "+patch-get-patched-files" "+s" "+webjump-read-string-"))


;;; Generated autoloads from ../modules/on-demand/me-linux.el

(minemacs-register-on-demand-module 'me-linux :auto-mode '(("/Kconfig\\'" . kconfig-mode) ("\\.cocci$" . cocci-mode) ("\\.iso$" . cocci-mode)))


;;; Generated autoloads from ../modules/on-demand/me-llvm.el

(minemacs-register-on-demand-module 'me-llvm :auto-mode '(("\\.ll\\'" . llvm-ts-mode)) :companion-packages '(((llvm-mode llvm-ts-mode) . demangle-mode)))


;;; Generated autoloads from ../modules/on-demand/me-logs.el

(minemacs-register-on-demand-module 'me-logs :auto-mode '(("\\.log\\(?:\\.[0-9\\-]+\\)?\\'" . logview-mode)) :define-loader t)


;;; Generated autoloads from ../modules/on-demand/me-lua.el

(minemacs-register-on-demand-module 'me-lua :auto-mode '(("\\.lua\\'" . lua-mode)) :interpreter-mode '(("lua" . lua-mode)))


;;; Generated autoloads from ../modules/on-demand/me-markdown.el

(minemacs-register-on-demand-module 'me-markdown :auto-mode '(("\\.\\(?:md\\|markdown\\|mkd\\|mdown\\|mkdn\\|mdwn\\)\\'" . markdown-mode)) :companion-packages '((markdown-ts-mode . markdown-mode)) :define-loader t)


;;; Generated autoloads from ../modules/on-demand/me-mathematica.el

(minemacs-register-on-demand-module 'me-mathematica)


;;; Generated autoloads from ../modules/on-demand/me-maxima.el

(defconst +maxima-path (if-let* ((sys-path "/usr/share/emacs/site-lisp/maxima/") ((file-directory-p sys-path))) sys-path (mapcar (apply-partially #'concat minemacs-on-demand-modules-dir "third-party/maxima/") '("emaxima/" "imaxima/" "misc/"))))
(defconst +maxima-available-p (and (executable-find "maxima") t))
(minemacs-register-on-demand-module 'me-maxima :define-loader '+maxima-available-p :auto-mode '(("\\.ma[cx]\\'" . maxima-mode)) :interpreter-mode '(("maxima" . maxima-mode)))


;;; Generated autoloads from ../modules/on-demand/me-mercury.el

(minemacs-register-on-demand-module 'me-mercury :companion-packages '((mercury-mode . metal-mercury-mode)))


;;; Generated autoloads from ../modules/on-demand/me-mermaid.el

(minemacs-register-on-demand-module 'me-mermaid :auto-mode '(("\\.mmd\\'" . mermaid-mode)))


;;; Generated autoloads from ../modules/on-demand/me-mode-framework.el

(minemacs-register-on-demand-module 'me-mode-framework :auto-mode '(("\\.\\(robot\\|resource\\)\\'" . robot-mode)))


;;; Generated autoloads from ../modules/on-demand/me-modelica.el

(minemacs-register-on-demand-module 'me-modelica :auto-mode '(("\\.mo\\'" . modelica-mode)))


;;; Generated autoloads from ../modules/on-demand/me-mojo.el

(minemacs-register-on-demand-module 'me-mojo :auto-mode '(("\\.mojo\\'" . mojo-mode) ("\\.🔥\\'" . mojo-mode)))


;;; Generated autoloads from ../modules/extras/me-mu4e-extras.el

(register-definition-prefixes "../modules/extras/me-mu4e-extras" '("+mu4e-" "+org-msg-make-signature"))


;;; Generated autoloads from ../modules/extras/me-mu4e-gmail.el

(register-definition-prefixes "../modules/extras/me-mu4e-gmail" '("+mu4e-"))


;;; Generated autoloads from ../modules/extras/me-mu4e-ui.el

(register-definition-prefixes "../modules/extras/me-mu4e-ui" '("+icon-colors" "+mu4e-"))


;;; Generated autoloads from ../modules/on-demand/me-nim.el

(minemacs-register-on-demand-module 'me-nim :auto-mode '(("\\.nim\\'" . nim-mode) ("\\.nim\\(ble\\|s\\)\\'" . nimscript-mode-maybe)))


;;; Generated autoloads from ../modules/on-demand/me-nix.el

(minemacs-register-on-demand-module 'me-nix :auto-mode '(("\\.nix\\'" . nix-mode) ("\\.nix\\'" . nix-ts-mode)))


;;; Generated autoloads from ../modules/on-demand/me-nushell.el

(minemacs-register-on-demand-module 'me-nushell :auto-mode '(("\\.nu\\'" . nushell-mode)) :interpreter-mode '(("nu" . nushell-mode)))


;;; Generated autoloads from ../modules/on-demand/me-ocaml.el

(minemacs-register-on-demand-module 'me-ocaml :auto-mode '(("\\.mly\\'" . tuareg-menhir-mode) (("\\.eliomi?\\'" "\\.ml[ip]?\\'") . tuareg-mode) ("\\(?:\\`\\|/\\)dune\\(?:\\.inc\\|\\-project\\|\\-workspace\\)?\\'" . dune-mode)) :interpreter-mode '(("ocamlrun" . tuareg-mode) ("ocaml" . tuareg-mode)))
(register-definition-prefixes "../modules/on-demand/me-ocaml" '("+dune-path"))


;;; Generated autoloads from ../modules/on-demand/me-odin.el

(minemacs-register-on-demand-module 'me-odin :auto-mode '(("\\.odin\\'" . odin-mode)))


;;; Generated autoloads from ../modules/on-demand/me-opencl.el

(minemacs-register-on-demand-module 'me-opencl :auto-mode '(("\\.\\(?:clc?\\|opencl\\)'" . opencl-c-mode)))


;;; Generated autoloads from ../modules/on-demand/me-openscad.el

(minemacs-register-on-demand-module 'me-openscad :auto-mode '(("\\.scad\\'" . scad-mode)))


;;; Generated autoloads from extras/me-org-x.el

(register-definition-prefixes "extras/me-org-x" '("+org-"))


;;; Generated autoloads from ../modules/on-demand/me-p4.el

(minemacs-register-on-demand-module 'me-p4 :auto-mode '(("\\.p4\\(info\\)?\\'" . p4-16-mode)))


;;; Generated autoloads from ../modules/on-demand/me-pandoc.el

(minemacs-register-on-demand-module 'me-pandoc :companion-packages '(((markdown-mode markdown-ts-mode org-mode tex-mode latex-mode) . pandoc-mode)))


;;; Generated autoloads from ../modules/on-demand/me-pcap.el

(minemacs-register-on-demand-module 'me-pcap :auto-mode '(("\\.\\(?:5vw\\|apc\\|bfr\\|cap\\|dmp\\|eth\\|fdc\\|mplog\\|n\\(?:cf\\|tar\\)\\|p\\(?:cap\\(?:ng\\)?\\|kt\\)\\|rf5\\|s\\(?:noop\\|yc\\)\\|t\\(?:pc\\|r\\(?:c[01]\\|[1c]\\)\\)\\|vn\\(?:tc\\)?\\|wpz\\)$" . pcap-mode)))


;;; Generated autoloads from ../modules/on-demand/me-pdf.el

(minemacs-register-on-demand-module 'me-pdf :auto-mode '(("\\.[pP][dD][fF]\\'" . pdf-view-mode)) :magic-mode '(("%PDF" . pdf-view-mode)) :companion-packages '((doc-view-mode pdf-view-mode pdf-isearch-minor-mode pdf-view-restore-mode)))


;;; Generated autoloads from ../modules/on-demand/me-pkgbuild.el

(minemacs-register-on-demand-module 'me-pkgbuild :auto-mode '(("/PKGBUILD\\'" . pkgbuild-mode)) :companion-packages '(((sh-mode bash-ts-mode) . pkgbuild-mode)))


;;; Generated autoloads from ../modules/on-demand/me-plantuml.el

(minemacs-register-on-demand-module 'me-plantuml :auto-mode '(("\\.\\(plantuml\\|pum\\|plu\\)\\'" . plantuml-mode)))


;;; Generated autoloads from ../modules/on-demand/me-powershell.el

(minemacs-register-on-demand-module 'me-powershell :auto-mode '(("\\.ps[dm]?1\\'" . powershell-mode)))


;;; Generated autoloads from extras/me-project-x.el

(with-eval-after-load 'project (require 'me-project-x))
(provide 'projectile)
(defun projectile-project-p (&optional dir) (let ((default-directory (or dir default-directory))) (and (project-current) t)))
(defun projectile-project-root (&optional dir) (when-let* ((default-directory (or dir default-directory)) (proj (project-current))) (expand-file-name (project-root proj))))
(defun projectile-project-name (&optional proj) (when-let* ((proj (or proj (project-current)))) (project-name proj)))
(defun projectile-project-files (&optional proj-root) (when-let* ((default-directory (or proj-root default-directory)) (proj (project-current))) (mapcar #'file-relative-name (project-files proj))))
(defun projectile-project-buffers (&optional proj) (when-let* ((proj (or proj (project-current)))) (project-buffers proj)))
(defun projectile-expand-root (name &optional dir) (when (projectile-project-p dir) (expand-file-name name (projectile-project-root dir))))
(defun projectile-verify-file (file &optional dir) (when-let* ((file (projectile-expand-root file dir))) (file-exists-p file)))
(defun projectile-project-buffer-p (buffer proj-root) (and (let ((default-directory proj-root)) (member buffer (projectile-project-buffers))) t))
(register-definition-prefixes "extras/me-project-x" '("+fd-" "+project-"))


;;; Generated autoloads from ../modules/on-demand/me-protobuf.el

(minemacs-register-on-demand-module 'me-protobuf :auto-mode '(("\\.proto\\'" . protobuf-mode)))
(register-definition-prefixes "../modules/on-demand/me-protobuf" '("+protobuf-path"))


;;; Generated autoloads from ../modules/on-demand/me-purescript.el

(minemacs-register-on-demand-module 'me-purescript :auto-mode '(("\\.purs\\'" . purescript-mode)))


;;; Generated autoloads from ../modules/on-demand/me-python.el

(minemacs-register-on-demand-module 'me-python :companion-packages '(((python-mode python-ts-mode) . python-docstring-mode)) :auto-mode '((("requirements\\.in" "\\.pip\\'" "requirements[^z-a]*\\.txt\\'") . pip-requirements-mode)))


;;; Generated autoloads from ../modules/on-demand/me-qsharp.el

(minemacs-register-on-demand-module 'me-qsharp :auto-mode '(("\\.qs\\'" . qsharp-mode)))


;;; Generated autoloads from ../modules/on-demand/me-qt.el

(minemacs-register-on-demand-module 'me-qt :auto-mode '(("\\.qml\\'" . qml-mode) ("\\.pr[io]\\'" . qt-pro-mode)))
(add-to-list 'auto-mode-alist '("\\.qss\\'" . css-mode))
(add-to-list 'auto-mode-alist '("\\.qrc\\'" . xml-mode))


;;; Generated autoloads from ../modules/on-demand/me-rust.el

(minemacs-register-on-demand-module 'me-rust :auto-mode '(("\\.rs\\'" rustic-mode rust-mode)) :companion-packages '((rust-ts-mode rust-mode rustic)))


;;; Generated autoloads from ../modules/on-demand/me-scala.el

(minemacs-register-on-demand-module 'me-scala :auto-mode '(("\\.\\(scala\\|sbt\\|worksheet\\.sc\\)\\'" . scala-mode)) :companion-packages '(((scala-mode scala-ts-mode) . sbt-mode)))


;;; Generated autoloads from ../modules/on-demand/me-scallop.el

(minemacs-register-on-demand-module 'me-scallop :auto-mode '(("\\.scl\\'" . scallop-mode)))


;;; Generated autoloads from ../modules/on-demand/me-scheme.el

(minemacs-register-on-demand-module 'me-scheme :auto-mode '(("\\.rkt[dl]?\\'" . racket-mode)) :interpreter-mode '(("racket" . racket-mode)) :companion-packages '(((racket-mode scheme-mode) geiser-mode flymake-guile)))


;;; Generated autoloads from ../modules/on-demand/me-selinux-policy.el

(minemacs-register-on-demand-module 'me-selinux-policy :auto-mode '(("\\.te\\'" . selinuxpolicy-mode)))


;;; Generated autoloads from ../modules/on-demand/me-smalltalk.el

(minemacs-register-on-demand-module 'me-smalltalk :auto-mode '(("\\.st\\'" . smalltalk-mode)))


;;; Generated autoloads from extras/me-smerge-x.el

(with-eval-after-load 'smerge-mode (require 'me-smerge-x))
(register-definition-prefixes "extras/me-smerge-x" '("+recenter:after-a" "+smerge-"))


;;; Generated autoloads from ../modules/on-demand/me-sml.el

(minemacs-register-on-demand-module 'me-sml :auto-mode '(("\\.s\\(?:ml\\|ig\\)\\'" . sml-mode) ("\\.cm\\'" . sml-cm-mode) ("\\.grm\\'" . sml-yacc-mode)))


;;; Generated autoloads from ../modules/on-demand/me-sql.el

(minemacs-register-on-demand-module 'me-sql :companion-packages '((sql-mode . sqlup-mode)))


;;; Generated autoloads from ../modules/on-demand/me-stan.el

(minemacs-register-on-demand-module 'me-stan :auto-mode '(("\\.stan\\'" . stan-mode)) :companion-packages '(((stan-mode stan-ts-mode) eldoc-stan stan-snippets)))


;;; Generated autoloads from ../modules/on-demand/me-statistics.el

(minemacs-register-on-demand-module 'me-statistics :auto-mode '((("\\(NAMESPACE\\|CITATION\\)\\'" "/R/.*\\.q\\'" "\\.[rR]\\(profile\\)?\\'") . ess-r-mode) (("\\.[Bb][Uu][Gg]\\'" "\\.[Bb][Oo][Gg]\\'" "\\.[Bb][Mm][Dd]\\'") . ess-bugs-mode) ("\\.[Rr]out\\'" . ess-r-transcript-mode) ("\\.Rd\\'" . Rd-mode) ("\\.[Jj][Aa][Gg]\\'" . ess-jags-mode) ("\\.inp\\'" . ess-gretl-mode)) :interpreter-mode '((("r" "Rscript") . ess-r-mode)))
(add-to-list 'auto-mode-alist '("/Makevars\\(\\.win\\)?\\'" . makefile-mode))
(add-to-list 'auto-mode-alist '("DESCRIPTION\\'" . conf-colon-mode))


;;; Generated autoloads from ../modules/on-demand/me-swift.el

(minemacs-register-on-demand-module 'me-swift :auto-mode '(("\\.swift\\(interface\\)?\\'" . swift-mode)))


;;; Generated autoloads from ../modules/on-demand/me-systemd.el

(minemacs-register-on-demand-module 'me-systemd :auto-mode `(("\\.nspawn\\'" . systemd-mode) (,(rx (+? (any "a-zA-Z0-9-_.@\\")) "." (or "automount" "busname" "mount" "path" "service" "slice" "socket" "swap" "target" "timer" "link" "netdev" "network") string-end) . systemd-mode) (,(rx ".#" (or (and (+? (any "a-zA-Z0-9-_.@\\")) "." (or "automount" "busname" "mount" "path" "service" "slice" "socket" "swap" "target" "timer" "link" "netdev" "network")) "override.conf") (= 16 (char hex-digit)) string-end) . systemd-mode) (,(rx "/systemd/" (+? anything) ".d/" (+? (not (any 47))) ".conf" string-end) . systemd-mode)))


;;; Generated autoloads from ../modules/on-demand/me-textile.el

(minemacs-register-on-demand-module 'me-textile :auto-mode '(("\\.textile\\'" . textile-mode)))


;;; Generated autoloads from ../modules/on-demand/me-toml.el

(minemacs-register-on-demand-module 'me-toml :auto-mode '(("\\.toml\\'" . toml-mode)) :companion-packages '((toml-ts-mode . toml-mode)))


;;; Generated autoloads from extras/me-tramp-adb-x.el

(with-eval-after-load 'tramp-adb (require 'me-tramp-adb-x))


;;; Generated autoloads from extras/me-treesit-x.el

(with-eval-after-load 'treesit (require 'me-treesit-x))
(register-definition-prefixes "extras/me-treesit-x" '("+treesit-"))


;;; Generated autoloads from ../modules/on-demand/me-typst.el

(minemacs-register-on-demand-module 'me-typst :auto-mode '(("\\.typ\\'" . typst-ts-mode)))


;;; Generated autoloads from ../modules/on-demand/me-v.el

(minemacs-register-on-demand-module 'me-v :auto-mode '(("\\(\\.v?v\\|\\.vsh\\)$" . v-mode)))


;;; Generated autoloads from ../modules/on-demand/me-vala.el

(minemacs-register-on-demand-module 'me-vala :auto-mode '(("\\.vala\\'" . vala-mode) ("\\.vapi\\'" . vala-mode)) :companion-packages '((vala-mode . vala-snippets)))


;;; Generated autoloads from me-vars.el

(register-definition-prefixes "me-vars" '("+clang-format-command" "+env-" "+use-package-check-for-disabled" "minemacs-"))


;;; Generated autoloads from ../modules/on-demand/me-vimscript.el

(minemacs-register-on-demand-module 'me-vimscript :auto-mode '((("\\.vim\\'" "[._]?g?vimrc\\'" "\\.exrc\\'") . vimrc-mode)))


;;; Generated autoloads from extras/me-viper-x.el

(with-eval-after-load 'viper (require 'me-viper-x))
(register-definition-prefixes "extras/me-viper-x" '("+viper-" "viper-change-inner-compound-word"))


;;; Generated autoloads from ../modules/on-demand/me-web.el

(minemacs-register-on-demand-module 'me-web :auto-mode '((("\\.tpl\\.php\\'" "\\.[lh]?eex\\'" "\\.[agj]sp\\'" "\\.ejs\\'" "\\.hbs\\'" "\\.svelte\\'" "\\.twig\\'" "\\.jinja2?\\'" "\\.eco\\'" "\\.as[cp]x\\'" "\\.erb\\'" "\\.mustache\\'" "\\.djhtml\\'" "\\.vue\\'" "wp-content/themes/.+/.+\\.php\\'" "\\.\\(?:tpl\\|blade\\)\\(?:\\.php\\)?\\'" "/\\(views\\|html\\|templates\\)/.*\\.php\\'") . web-mode) ("\\.haml\\'" . haml-mode) ("\\.sass\\'" . sass-mode) ("\\.was?t\\'" . wat-mode)) :companion-packages '(((php-mode php-ts-mode html-mode html-ts-mode css-mode) web-mode haml-mode emmet-mode sass-mode) ((js-mode js-ts-mode) . flymake-biome)))


;;; Generated autoloads from ../modules/on-demand/me-wiki.el

(minemacs-register-on-demand-module 'me-wiki :auto-mode '(("\\.wiki\\'" . wikitext-mode)))


;;; Generated autoloads from ../modules/on-demand/me-yaml.el

(minemacs-register-on-demand-module 'me-yaml :auto-mode '(("\\.\\(e?ya?\\|ra\\)ml\\'" . yaml-mode)) :magic-mode '(("^%YAML\\s-+[0-9]+\\.[0-9]+\\(\\s-+#\\|\\s-*$\\)" . yaml-mode)) :companion-packages '((yaml-ts-mode yaml-mode yaml-pro-ts-mode ansible-mode)))


;;; Generated autoloads from ../modules/on-demand/me-yang.el

(minemacs-register-on-demand-module 'me-yang :auto-mode '(("\\.[Yy][Aa][Nn][Gg]\\'" . yang-mode)))


;;; Generated autoloads from ../modules/on-demand/me-zig.el

(minemacs-register-on-demand-module 'me-zig :auto-mode '(("\\.\\(zig\\|zon\\)\\'" . zig-mode)))


;;; Generated autoloads from minemacs-loaded.el

(register-definition-prefixes "minemacs-loaded" '("minemacs--lazy-"))


;;; Generated autoloads from ../elisp/minemacs-modeline.el

(defvar minemacs-modeline-mode nil "\
Non-nil if Minemacs-Modeline mode is enabled.
See the `minemacs-modeline-mode' command
for a description of this minor mode.
Setting this variable directly does not take effect;
either customize it (see the info node `Easy Customization')
or call the function `minemacs-modeline-mode'.")
(custom-autoload 'minemacs-modeline-mode "../elisp/minemacs-modeline" nil)
(autoload 'minemacs-modeline-mode "../elisp/minemacs-modeline" "\
MinEmacs' mode-line.

This is a global minor mode.  If called interactively, toggle the
`Minemacs-Modeline mode' mode.  If the prefix argument is positive,
enable the mode, and if it is zero or negative, disable the mode.

If called from Lisp, toggle the mode if ARG is `toggle'.  Enable the
mode if ARG is nil, omitted, or is a positive number.  Disable the mode
if ARG is a negative number.

To check whether the minor mode is enabled in the current buffer,
evaluate `(default-value \\='minemacs-modeline-mode)'.

The mode's hook is called both when the mode is enabled and when it is
disabled.

(fn &optional ARG)" t)
(register-definition-prefixes "../elisp/minemacs-modeline" '("minemacs-modeline-"))


;;; Generated autoloads from ../elisp/once.el

(autoload 'once-eval-after-load "../elisp/once" "\
Like `eval-after-load' but don't always add to `after-load-alist'.
When FILE has already been loaded, execute FORM immediately without adding it to
`after-load-alist'.  Otherwise add it to `after-load-alist' but remove the FORM
from `after-load-alist' after it runs.  See `eval-after-load' for more
information.

(fn FILE FORM)")
(defalias 'once-after-load #'once-eval-after-load)
(autoload 'once-with-eval-after-load "../elisp/once" "\
Like `with-eval-after-load' but don't always add to `after-load-alist'.
When FILE has already been loaded, execute BODY immediately without adding it to
`after-load-alist'.  Otherwise add it to `after-load-alist' but remove the FORM
from `after-load-alist' after it runs.  See `eval-after-load' for more
information.

(fn FILE &rest BODY)" nil t)
(function-put 'once-with-eval-after-load 'lisp-indent-function 1)
(defalias 'once-with #'once-with-eval-after-load)
(autoload 'once-x-call "../elisp/once" "\
When CONDITION is first met, call FUNCTIONS once.

The \"once\" has two meanings:
- Run something once some condition is met (hook OR advice with optional extra
  checks)
- Run it only once (unlike `eval-after-load')

This is inspired by `evil-delay', Doom's :after-call, Doom's `defer-until!',
etc.  It can be thought of as a combination of transient hooks, advice, and
`eval-after-load'.  It aims to be both very generic but to also provide more
convenient syntax for common cases.  If you don't need a combination of these
conditions, you can alternatively use `satch-add-hook' (from satch.el),
`satch-advice-add', or `once-with' instead.

FUNCTIONS should be a single function or a list of functions.  FUNCTIONS will
only run once.  This function will add FUNCTIONS to any specified hooks or as
advice to any specified functions, but it will remove all advice/hook additions
the first time FUNCTIONS run to prevent multiple runs.

Unlike `satch-add-hook' and `satch-advice-add' (from satch.el), all FUNCTIONS
should take no arguments.

CONDITION should be a condition in the following format:
(list :hooks arg1 arg2... :before arg1 arg2... :check (lambda () ...) ...)

Here are the available CONDITION keywords:

- :check - an additional check to determine whether to run FUNCTIONS.  This will
  be used initially to determine whether to add any advice or to any hooks.  If
  the check returns non-nil, FUNCTIONS will be run immediately.  Otherwise, the
  advice/hook additions will be made, and FUNCTIONS will run the first time the
  check succeeds when an advised function or hook triggers.
- :initial-check - an alternate check to determine whether to run FUNCTIONS
  before adding any advice or to any hooks.  When both :check and :initial-check
  are specified, :initial-check will be used only before adding advice or adding
  to hooks, and :check will only be used when the advised function or hook
  triggers.
- :hooks - list of hooks that can trigger running FUNCTIONS
- :packages or :files - list of files/features (i.e. valid arguments to
  `eval-after-load') that can trigger running FUNCTIONS on load.  Unlike :after
  or Doom's after!, `once-x-call' does not support any sort of complex
  \"and\"/\"or\" rules for packages.  I have yet to encounter a situation where
  these are actually necessary.  Any of the specified files/packages loading can
  trigger FUNCTIONS.
- :variables or :vars - list of variables that can trigger running FUNCTIONS
  when set (using `add-variable-watcher')
- any advice WHERE position (e.g. :before or :after) - list of functions to
  advise that can trigger running FUNCTIONS

You must specify at least one of :hooks, :packages/:files, :variables, or the
advice keywords.

If you want to potentially run FUNCTIONS immediately, you must specify
:initial-check and/or :check.  The only exception is if you specify :packages.
If there are no checks and any of the specified files/features has loaded,
FUNCTIONS will be run immediately.  On the other hand, if :check is specified
and fails initially, the code will always be delayed even if one of the
files/features has already loaded.  In that case, some other method (a different
package load or a hook or advice) will have to trigger later when the :check
returns non-nil for FUNCTIONS to run.

If you specify :check but do not want FUNCTIONS to run immediately if the check
passes, you should specify :initial-check as (lambda () nil).

Arguments can specify a \"local check\" that only applies to a specific hook,
for example, by specifying a list like (<hook> <specific-check>) instead of a
single symbol.  For example:
(list
 :hooks
 (list \\='after-load-functions (lambda (_load-file) (boundp \\='some-symbol))))

Unlike the :check and :initial-check functions, which take no arguments, a local
check function will be passed whatever arguments are given for the hook or
advice.  For :variables, a local check function will be passed <symbol newval
operation where> like the watch-function for `add-variable-watcher'.  If your
local check does not need to use any given arguments, specify (&rest _).

Packages can also specify a local check, but it will be passed no arguments, so
this may not often be useful.

Here is a phony example of what a `once-x-call' invocation looks like (you
would never actually use this condition):
(once-x-call (list :hooks \\='pre-command-hook-hook \\='another-hook
                   :before \\='after-find-file
                   :packages \\='evil
                   :initial-check (lambda () (and (bar) (foo)))
                   :check (lambda () (foo)))
             #\\='some-mode)

If you set `once-shorthand' to non-nil, you can also use a more brief
condition syntax.  See its documentation for more information.

For real examples, see the README or specific once \"x\" utilities like
`once-gui' and `once-buffer'.

(fn CONDITION &rest FUNCTIONS)")
(function-put 'once-x-call 'lisp-indent-function 1)
(autoload 'once "../elisp/once" "\
When CONDITION is met for the first time, execute BODY.
If the first item is BODY is anything that could be a function, it will be
considered to be a list of functions:
(once condition #\\='foo \\='bar some-func-in-var (lambda ()))

Otherwise, if the first item is in the form (fun arg1), it will be considered to
be a function body:
 (once <condition>
   (foo)
   (bar)
   (baz))

See `once-x-call' for more information, including how to specify CONDITION.

(fn CONDITION &rest BODY)" nil t)
(function-put 'once 'lisp-indent-function 1)
(register-definition-prefixes "../elisp/once" '("once-"))


;;; Generated autoloads from ../elisp/prot-common.el

(autoload 'prot-common-number-even-p "../elisp/prot-common" "\
Test if N is an even number.

(fn N)")
(autoload 'prot-common-number-integer-p "../elisp/prot-common" "\
Test if N is an integer.

(fn N)")
(autoload 'prot-common-number-integer-positive-p "../elisp/prot-common" "\
Test if N is a positive integer.

(fn N)")
(autoload 'prot-common-number-negative "../elisp/prot-common" "\
Make N negative.

(fn N)")
(autoload 'prot-common-reverse-percentage "../elisp/prot-common" "\
Determine the original value of NUMBER given PERCENT.

CHANGE-P should specify the increase or decrease.  For simplicity,
nil means decrease while non-nil stands for an increase.

NUMBER must satisfy `numberp', while PERCENT must be `natnump'.

(fn NUMBER PERCENT CHANGE-P)")
(autoload 'prot-common-percentage-change "../elisp/prot-common" "\
Find percentage change between N-ORIGINAL and N-FINAL numbers.

When the percentage is not an integer, it is rounded to 4
floating points: 16.666666666666664 => 16.667.

(fn N-ORIGINAL N-FINAL)")
(autoload 'prot-common-seconds-to-minutes-or-hours "../elisp/prot-common" "\
Convert SECONDS to either minutes or hours, depending on the value.

(fn SECONDS)")
(autoload 'prot-common-rotate-list-of-symbol "../elisp/prot-common" "\
Rotate list value of SYMBOL by moving its car to the end.
Return the first element before performing the rotation.

This means that if `sample-list' has an initial value of `(one
two three)', this function will first return `one' and update the
value of `sample-list' to `(two three one)'.  Subsequent calls
will continue rotating accordingly.

(fn SYMBOL)")
(autoload 'prot-common-empty-buffer-p "../elisp/prot-common" "\
Test whether the buffer is empty.")
(autoload 'prot-common-minor-modes-active "../elisp/prot-common" "\
Return list of active minor modes for the current buffer.")
(autoload 'prot-common-truncate-lines-silently "../elisp/prot-common" "\
Toggle line truncation without printing messages.")
(autoload 'prot-common-clear-minibuffer-message "../elisp/prot-common" "\
Print an empty message to clear the echo area.
Use this as advice :after a noisy function.

(fn &rest _)")
(autoload 'prot-common-disable-hl-line "../elisp/prot-common" "\
Disable Hl-Line-Mode (for hooks).")
(autoload 'prot-common-window-bounds "../elisp/prot-common" "\
Return start and end points in the window as a cons cell.")
(autoload 'prot-common-page-p "../elisp/prot-common" "\
Return non-nil if there is a `page-delimiter' in the buffer.")
(autoload 'prot-common-window-small-p "../elisp/prot-common" "\
Return non-nil if window is small.
Check if the `window-width' or `window-height' is less than
`split-width-threshold' and `split-height-threshold',
respectively.")
(autoload 'prot-common-three-or-more-windows-p "../elisp/prot-common" "\
Return non-nil if three or more windows occupy FRAME.
If FRAME is non-nil, inspect the current frame.

(fn &optional FRAME)")
(autoload 'prot-common-read-data "../elisp/prot-common" "\
Read Elisp data from FILE.

(fn FILE)")
(autoload 'prot-common-completion-category "../elisp/prot-common" "\
Return completion category.")
(autoload 'prot-common-completion-table "../elisp/prot-common" "\
Pass appropriate metadata CATEGORY to completion CANDIDATES.

This is intended for bespoke functions that need to pass
completion metadata that can then be parsed by other
tools (e.g. `embark').

(fn CATEGORY CANDIDATES)")
(autoload 'prot-common-completion-table-no-sort "../elisp/prot-common" "\
Pass appropriate metadata CATEGORY to completion CANDIDATES.
Like `prot-common-completion-table' but also disable sorting.

(fn CATEGORY CANDIDATES)")
(autoload 'prot-common-crm-exclude-selected-p "../elisp/prot-common" "\
Filter out INPUT from `completing-read-multiple'.
Hide non-destructively the selected entries from the completion
table, thus avoiding the risk of inputting the same match twice.

To be used as the PREDICATE of `completing-read-multiple'.

(fn INPUT)")
(autoload 'prot-common-auth-get-field "../elisp/prot-common" "\
Find PROP in `auth-sources' for HOST entry.

(fn HOST PROP)")
(autoload 'prot-common-parse-file-as-list "../elisp/prot-common" "\
Return the contents of FILE as a list of strings.
Strings are split at newline characters and are then trimmed for
negative space.

Use this function to provide a list of candidates for
completion (per `completing-read').

(fn FILE)")
(autoload 'prot-common-contrast "../elisp/prot-common" "\
Measure WCAG contrast ratio between C1 and C2.
C1 and C2 are color values written in hexadecimal RGB.

(fn C1 C2)")
(register-definition-prefixes "../elisp/prot-common" '("prot-common-"))


;;; Generated autoloads from ../elisp/prot-window.el

 (autoload 'prot-window-shell "prot-window")
 (autoload 'prot-window-coach "prot-window")
 (autoload 'prot-window-popup-org-capture "prot-window")
 (autoload 'prot-window-popup-tmr "prot-window")
 (autoload 'prot-window-popup-tmr "prot-window")
(register-definition-prefixes "../elisp/prot-window" '("prot-window-"))


;;; Generated autoloads from ../elisp/satch.el

(autoload 'satch-setq "../elisp/satch" "\
A stripped-down `customize-set-variable' with the syntax of `setq'.
Like `setq', multiple variables can be set at once; SETTINGS should consist of
variable to value pairs.

Some variables have a custom setter (specified with `defcustom' and :set) that
is used to run code necessary for changes to take effect (e.g.
`auto-revert-interval').  If a package has already been loaded, and the user
uses `setq' to set one of these variables, the :set code will not run (e.g. in
the case of `auto-revert-interval', the timer will not be updated).  Like with
`customize-set-variable', `satch-setq' will use the custom :set setter when it
exists.  If the package defining the variable has not yet been loaded, the
custom setter will not be known, but it will still be run upon loading the
package.

Unlike `customize-set-variable', `satch-setq' does not attempt to load any
dependencies for the variable and does not support giving variables
comments (which makes it 10-100x faster, though this generally shouldn't
matter).  It also falls back to `set' instead of `set-default', so that like
`setq' it will change the local value of a buffer-local variable instead of the
default value.  See `satch-setq-default' for an equivalent that falls back to
`set-default'.

In the future, this will automatically record user SETTINGS using annalist.el.

(fn &rest SETTINGS)" nil t)
(autoload 'satch-set "../elisp/satch" "\
Like `satch-setq' but evaluate variable positions like `set'.
In the future, this will automatically record user SETTINGS using annalist.el.

(fn &rest SETTINGS)" nil t)
(autoload 'satch-setq-default "../elisp/satch" "\
Like `satch-setq' but fall back to `set-default' if no custom setter.
In the future, this will automatically record user SETTINGS using annalist.el.

(fn &rest SETTINGS)" nil t)
(autoload 'satch-setq-local "../elisp/satch" "\
Like `satch-set' but make all variables in SETTINGS buffer-local.
In the future, this will automatically record user settings using annalist.el.

(fn &rest SETTINGS)" nil t)
(autoload 'satch-pushnew "../elisp/satch" "\
Call `cl-pushnew' with X, PLACE, and KEYS.
:test defaults to `equal'.  If PLACE has a a custom-set function, call it
afterwards with PLACE and its new value.

In the future, this will automatically record user settings using annalist.el.

(fn X PLACE &rest KEYS)" nil t)
(autoload 'satch-add-hook "../elisp/satch" "\
A drop-in replacement for `add-hook'.
Unlike `add-hook', HOOKS and FUNCTIONS can be single items or lists.  DEPTH and
LOCAL are passed directly to `add-hook'.

Since this can add to multiple hooks, make sure not to mix HOOKS that run with
different numbers of arguments (or make sure that your specified FUNCTIONS
handle this).  Most hooks do not pass arguments, so FUNCTIONS will usually not
take any arguments, but keep this possibility in mind.

When TRANSIENT is non-nil, each function will remove itself from every hook in
HOOKS after it is run once.  If TRANSIENT is a function, call it when a hook
runs with any arguments to determine whether to continue.  If it returns nil, do
nothing.  If it returns non-nil, run the function and remove it from HOOKS.

In the future, this will automatically record hook additions using annalist.el.

(fn HOOKS FUNCTIONS &optional DEPTH LOCAL &key TRANSIENT)")
(autoload 'satch-remove-hook "../elisp/satch" "\
A drop-in replacement for `remove-hook'.
Unlike `remove-hook', HOOKS and FUNCTIONS can be single items or lists.  LOCAL
is passed directly to `remove-hook'.

(fn HOOKS FUNCTIONS &optional LOCAL)")
(autoload 'satch-advice-add "../elisp/satch" "\
A drop-in replacement for `advice-add'.
SYMBOLS, WHERE, FUNCTIONS, and PROPS correspond to the arguments for
`advice-add'.  Unlike `advice-add', SYMBOLS and FUNCTIONS can be single items or
lists.

Usually you will specify multiple SYMBOLS and not multiple FUNCTIONS.  Note That
all FUNCTIONS must be able to handle the argument lists of all SYMBOLS.  Most of
the time when you specify either as a list, the function(s) will ignore all
arguments rather than try to handle different argument lists.

When TRANSIENT is non-nil, each function will remove itself as advice after it
is run once.  If TRANSIENT is a function, call it with the same arguments that
would be passed to the advice function.  If it returns nil, do nothing.  If it
returns non-nil, run the function and remove it from HOOKS.

In the future, this will automatically record advice using annalist.el.

(fn SYMBOLS WHERE FUNCTIONS &optional PROPS &key TRANSIENT)")
 (autoload 'satch-add-advice "satch")
(autoload 'satch-advice-remove "../elisp/satch" "\
A drop-in replacement for `advice-remove'.
Unlike `advice-remove', SYMBOLS and FUNCTIONS can be single items or lists.

(fn SYMBOLS FUNCTIONS)")
 (autoload 'satch-remove-advice "satch")
(autoload 'satch-defun "../elisp/satch" "\
Define NAME as a function, returning the function.
This is `defun' but it is guaranteed to return the created function (`defun'
technically has an undefined return value).

(fn NAME ARGLIST &optional DOCSTRING &rest BODY)" nil t)
(function-put 'satch-defun 'doc-string-elt 3)
(function-put 'satch-defun 'lisp-indent-function 2)
(autoload 'satch-disable "../elisp/satch" "\
Return a named function that disables MODE.

(fn MODE)" nil t)
(register-definition-prefixes "../elisp/satch" '("satch--"))


;;; Generated autoloads from ../elisp/valgrind.el

(autoload 'valgrind "../elisp/valgrind" "\
Run valgrind.
Runs a shell COMMAND in a separate process asynchronously with output going to
the buffer `*valgrind*'.
You can then use the command \\[next-error] to find the next error message and
move to the source code that caused it.

(fn COMMAND)" t)
(register-definition-prefixes "../elisp/valgrind" '("valgrind-"))

;;; End of scraped data

(provide 'me-loaddefs)

;; Local Variables:
;; version-control: never
;; no-byte-compile: t
;; no-update-autoloads: t
;; no-native-compile: t
;; coding: utf-8
;; End:

;;; me-loaddefs.el ends here
